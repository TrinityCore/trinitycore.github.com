<dec f='TrinityCore3.3.5/dep/g3dlite/include/G3D/Crypto.h' l='105' type='static uint32 G3D::Crypto::crc32(const void * bytes, size_t numBytes)'/>
<doc f='TrinityCore3.3.5/dep/g3dlite/include/G3D/Crypto.h' l='97'>/**
     Computes the CRC32 value of a byte array.  CRC32 is designed to be a hash
     function that produces different values for similar strings.

     This implementation is compatible with PKZIP and GZIP.

     Based on http://www.gamedev.net/reference/programming/features/crc32/
    */</doc>
<def f='TrinityCore3.3.5/dep/g3dlite/source/Crypto.cpp' l='66' type='static uint32 G3D::Crypto::crc32(const void * byte, size_t numBytes)'/>
<dec f='TrinityCore6.x/dep/g3dlite/include/G3D/Crypto.h' l='105' type='static uint32 G3D::Crypto::crc32(const void * bytes, size_t numBytes)'/>
<doc f='TrinityCore6.x/dep/g3dlite/include/G3D/Crypto.h' l='97'>/**
     Computes the CRC32 value of a byte array.  CRC32 is designed to be a hash
     function that produces different values for similar strings.

     This implementation is compatible with PKZIP and GZIP.

     Based on http://www.gamedev.net/reference/programming/features/crc32/
    */</doc>
<def f='TrinityCore6.x/dep/g3dlite/source/Crypto.cpp' l='66' type='static uint32 G3D::Crypto::crc32(const void * byte, size_t numBytes)'/>
