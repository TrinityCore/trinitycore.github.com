<dec f='TrinityCore3.3.5/dep/g3dlite/include/G3D/CollisionDetection.h' l='705' type='static float G3D::CollisionDetection::collisionTimeForMovingPointFixedBox(const G3D::Vector3 &amp; point, const G3D::Vector3 &amp; velocity, const class Box &amp; box, G3D::Vector3 &amp; outLocation, G3D::Vector3 &amp; outNormal = ignore)'/>
<def f='TrinityCore3.3.5/dep/g3dlite/source/CollisionDetection.cpp' l='1176' type='static float G3D::CollisionDetection::collisionTimeForMovingPointFixedBox(const G3D::Vector3 &amp; point, const G3D::Vector3 &amp; velocity, const G3D::Box &amp; box, G3D::Vector3 &amp; location, G3D::Vector3 &amp; outNormal = ignore)'/>
<doc f='TrinityCore3.3.5/dep/g3dlite/source/CollisionDetection.cpp' l='1089'>/*
float CollisionDetection::collisionTimeForMovingPointFixedTriangle(
    const Vector3&amp; orig,
    const Vector3&amp; dir,
    const Vector3&amp; vert0,
    const Vector3&amp; vert1,
    const Vector3&amp; vert2) {

    // Barycenteric coords
    double u, v;
    #define EPSILON 0.000001
    #define CROSS(dest,v1,v2) \
              dest[0]=v1[1]*v2[2]-v1[2]*v2[1]; \
              dest[1]=v1[2]*v2[0]-v1[0]*v2[2]; \
              dest[2]=v1[0]*v2[1]-v1[1]*v2[0];

    #define DOT(v1,v2) (v1[0]*v2[0]+v1[1]*v2[1]+v1[2]*v2[2])

    #define SUB(dest,v1,v2) \
              dest[0]=v1[0]-v2[0]; \
              dest[1]=v1[1]-v2[1]; \
              dest[2]=v1[2]-v2[2]; 

    double edge1[3], edge2[3], tvec[3], pvec[3], qvec[3];
    
    // find vectors for two edges sharing vert0
    SUB(edge1, vert1, vert0);
    SUB(edge2, vert2, vert0);
    
    // begin calculating determinant - also used to calculate U parameter
    CROSS(pvec, dir, edge2);
    
    // if determinant is near zero, ray lies in plane of triangle
    const double det = DOT(edge1, pvec);
    
    if (det &lt; EPSILON) {
        return finf();
    }
    
    // calculate distance from vert0 to ray origin
    SUB(tvec, orig, vert0);
    
    // calculate U parameter and test bounds
    u = DOT(tvec, pvec);
    if ((u &lt; 0.0) || (u &gt; det)) {
        // Hit the plane outside the triangle
        return finf();
    }
    
    // prepare to test V parameter
    CROSS(qvec, tvec, edge1);
    
    // calculate V parameter and test bounds
    v = DOT(dir, qvec);
    if ((v &lt; 0.0) || (u + v &gt; det)) {
        // Hit the plane outside the triangle
        return finf();
    }
    
    // calculate t, scale parameters, ray intersects triangle
    // If we want u,v, we can compute this
    // double t = DOT(edge2, qvec);
    //const double inv_det = 1.0 / det;
    //t *= inv_det;
    //u *= inv_det;
    //v *= inv_det;
    // return t;

    // Case where we don&apos;t need correct (u, v):

    const double t = DOT(edge2, qvec);
    
    if (t &gt;= 0) {
        // Note that det must be positive
        return t / det;
    } else {
        // We had to travel backwards in time to intersect
        return finf();
    }

    #undef EPSILON
    #undef CROSS
    #undef DOT
    #undef SUB
}
*/</doc>
<doc f='TrinityCore3.3.5/dep/g3dlite/include/G3D/CollisionDetection.h' l='690'>/**
     Calculates time between the intersection of a moving point and a fixed
     box.

     @note If the point is already inside the box, no collision: inf is returned.

     @param point        Moving point.
     @param velocity     Sphere&apos;s velocity.
     @param box          Fixed box.
     @param outLocation  Position of collision. [Post Condition]
     @param outNormal    Box&apos;s surface normal to collision [Post Condition]

     @return Time til collision.  If there is no collision then the return
             value will be inf().
     */</doc>
<use f='TrinityCore3.3.5/dep/g3dlite/source/Ray.cpp' l='195' u='c' c='_ZNK3G3D3Ray16intersectionTimeERKNS_3BoxE'/>
<dec f='TrinityCore6.x/dep/g3dlite/include/G3D/CollisionDetection.h' l='705' type='static float G3D::CollisionDetection::collisionTimeForMovingPointFixedBox(const G3D::Vector3 &amp; point, const G3D::Vector3 &amp; velocity, const class Box &amp; box, G3D::Vector3 &amp; outLocation, G3D::Vector3 &amp; outNormal = ignore)'/>
<def f='TrinityCore6.x/dep/g3dlite/source/CollisionDetection.cpp' l='1176' type='static float G3D::CollisionDetection::collisionTimeForMovingPointFixedBox(const G3D::Vector3 &amp; point, const G3D::Vector3 &amp; velocity, const G3D::Box &amp; box, G3D::Vector3 &amp; location, G3D::Vector3 &amp; outNormal = ignore)'/>
<doc f='TrinityCore6.x/dep/g3dlite/source/CollisionDetection.cpp' l='1089'>/*
float CollisionDetection::collisionTimeForMovingPointFixedTriangle(
    const Vector3&amp; orig,
    const Vector3&amp; dir,
    const Vector3&amp; vert0,
    const Vector3&amp; vert1,
    const Vector3&amp; vert2) {

    // Barycenteric coords
    double u, v;
    #define EPSILON 0.000001
    #define CROSS(dest,v1,v2) \
              dest[0]=v1[1]*v2[2]-v1[2]*v2[1]; \
              dest[1]=v1[2]*v2[0]-v1[0]*v2[2]; \
              dest[2]=v1[0]*v2[1]-v1[1]*v2[0];

    #define DOT(v1,v2) (v1[0]*v2[0]+v1[1]*v2[1]+v1[2]*v2[2])

    #define SUB(dest,v1,v2) \
              dest[0]=v1[0]-v2[0]; \
              dest[1]=v1[1]-v2[1]; \
              dest[2]=v1[2]-v2[2]; 

    double edge1[3], edge2[3], tvec[3], pvec[3], qvec[3];
    
    // find vectors for two edges sharing vert0
    SUB(edge1, vert1, vert0);
    SUB(edge2, vert2, vert0);
    
    // begin calculating determinant - also used to calculate U parameter
    CROSS(pvec, dir, edge2);
    
    // if determinant is near zero, ray lies in plane of triangle
    const double det = DOT(edge1, pvec);
    
    if (det &lt; EPSILON) {
        return finf();
    }
    
    // calculate distance from vert0 to ray origin
    SUB(tvec, orig, vert0);
    
    // calculate U parameter and test bounds
    u = DOT(tvec, pvec);
    if ((u &lt; 0.0) || (u &gt; det)) {
        // Hit the plane outside the triangle
        return finf();
    }
    
    // prepare to test V parameter
    CROSS(qvec, tvec, edge1);
    
    // calculate V parameter and test bounds
    v = DOT(dir, qvec);
    if ((v &lt; 0.0) || (u + v &gt; det)) {
        // Hit the plane outside the triangle
        return finf();
    }
    
    // calculate t, scale parameters, ray intersects triangle
    // If we want u,v, we can compute this
    // double t = DOT(edge2, qvec);
    //const double inv_det = 1.0 / det;
    //t *= inv_det;
    //u *= inv_det;
    //v *= inv_det;
    // return t;

    // Case where we don&apos;t need correct (u, v):

    const double t = DOT(edge2, qvec);
    
    if (t &gt;= 0) {
        // Note that det must be positive
        return t / det;
    } else {
        // We had to travel backwards in time to intersect
        return finf();
    }

    #undef EPSILON
    #undef CROSS
    #undef DOT
    #undef SUB
}
*/</doc>
<doc f='TrinityCore6.x/dep/g3dlite/include/G3D/CollisionDetection.h' l='690'>/**
     Calculates time between the intersection of a moving point and a fixed
     box.

     @note If the point is already inside the box, no collision: inf is returned.

     @param point        Moving point.
     @param velocity     Sphere&apos;s velocity.
     @param box          Fixed box.
     @param outLocation  Position of collision. [Post Condition]
     @param outNormal    Box&apos;s surface normal to collision [Post Condition]

     @return Time til collision.  If there is no collision then the return
             value will be inf().
     */</doc>
<use f='TrinityCore6.x/dep/g3dlite/source/Ray.cpp' l='195' u='c' c='_ZNK3G3D3Ray16intersectionTimeERKNS_3BoxE'/>
