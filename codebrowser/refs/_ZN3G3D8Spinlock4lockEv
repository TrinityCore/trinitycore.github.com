<def f='TrinityCore3.3.5/dep/g3dlite/include/G3D/GMutex.h' l='52' type='bool G3D::Spinlock::lock()'/>
<doc f='TrinityCore3.3.5/dep/g3dlite/include/G3D/GMutex.h' l='45'>/** Busy waits until the lock is unlocked, then locks it
        exclusively.  Returns true if the lock succeeded on the first
        try (indicating no contention). 
        
        Unlike a G3D::GMutex, a single thread cannot re-enter
        Spinlock::lock() that it already locked.
     */</doc>
<use f='TrinityCore3.3.5/dep/g3dlite/source/Random.cpp' l='94' u='c' c='_ZN3G3D6Random8generateEv'/>
<use f='TrinityCore3.3.5/dep/g3dlite/source/System.cpp' l='1026' u='c' c='_ZN3G3D10BufferPool4lockEv'/>
<def f='TrinityCore6.x/dep/g3dlite/include/G3D/GMutex.h' l='52' type='bool G3D::Spinlock::lock()'/>
<doc f='TrinityCore6.x/dep/g3dlite/include/G3D/GMutex.h' l='45'>/** Busy waits until the lock is unlocked, then locks it
        exclusively.  Returns true if the lock succeeded on the first
        try (indicating no contention). 
        
        Unlike a G3D::GMutex, a single thread cannot re-enter
        Spinlock::lock() that it already locked.
     */</doc>
<use f='TrinityCore6.x/dep/g3dlite/source/Random.cpp' l='94' u='c' c='_ZN3G3D6Random8generateEv'/>
<use f='TrinityCore6.x/dep/g3dlite/source/System.cpp' l='1026' u='c' c='_ZN3G3D10BufferPool4lockEv'/>
