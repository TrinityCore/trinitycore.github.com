<dec f='TrinityCore3.3.5/dep/g3dlite/include/G3D/CollisionDetection.h' l='755' type='static float G3D::CollisionDetection::collisionTimeForMovingPointFixedCapsule(const G3D::Vector3 &amp; point, const G3D::Vector3 &amp; velocity, const class Capsule &amp; capsule, G3D::Vector3 &amp; outLocation, G3D::Vector3 &amp; outNormal = ignore)'/>
<def f='TrinityCore3.3.5/dep/g3dlite/source/CollisionDetection.cpp' l='1542' type='static float G3D::CollisionDetection::collisionTimeForMovingPointFixedCapsule(const G3D::Vector3 &amp; _point, const G3D::Vector3 &amp; velocity, const G3D::Capsule &amp; capsule, G3D::Vector3 &amp; location, G3D::Vector3 &amp; outNormal = ignore)'/>
<use f='TrinityCore3.3.5/dep/g3dlite/source/CollisionDetection.cpp' l='1838' u='c' c='_ZN3G3D18CollisionDetection40collisionTimeForMovingSphereFixedCapsuleERKNS_6SphereERKNS_7Vector3ERKNS_7CapsuleERS4_SA_'/>
<doc f='TrinityCore3.3.5/dep/g3dlite/include/G3D/CollisionDetection.h' l='742'>/**
     Calculates time between the intersection of a moving point and a fixed
     capsule.

     @param point        Moving point.
     @param velocity    Point&apos;s velocity.
     @param capsule        Fixed capsule.
     @param outLocation    Location of collision. [Post Condition]
     @param outNormal    Capsule&apos;s surface normal to collision [Post Condition]

     @return Time til collision.  If there is no collision then the return
             value will be inf().
     */</doc>
<dec f='TrinityCore6.x/dep/g3dlite/include/G3D/CollisionDetection.h' l='755' type='static float G3D::CollisionDetection::collisionTimeForMovingPointFixedCapsule(const G3D::Vector3 &amp; point, const G3D::Vector3 &amp; velocity, const class Capsule &amp; capsule, G3D::Vector3 &amp; outLocation, G3D::Vector3 &amp; outNormal = ignore)'/>
<def f='TrinityCore6.x/dep/g3dlite/source/CollisionDetection.cpp' l='1542' type='static float G3D::CollisionDetection::collisionTimeForMovingPointFixedCapsule(const G3D::Vector3 &amp; _point, const G3D::Vector3 &amp; velocity, const G3D::Capsule &amp; capsule, G3D::Vector3 &amp; location, G3D::Vector3 &amp; outNormal = ignore)'/>
<use f='TrinityCore6.x/dep/g3dlite/source/CollisionDetection.cpp' l='1838' u='c' c='_ZN3G3D18CollisionDetection40collisionTimeForMovingSphereFixedCapsuleERKNS_6SphereERKNS_7Vector3ERKNS_7CapsuleERS4_SA_'/>
<doc f='TrinityCore6.x/dep/g3dlite/include/G3D/CollisionDetection.h' l='742'>/**
     Calculates time between the intersection of a moving point and a fixed
     capsule.

     @param point        Moving point.
     @param velocity    Point&apos;s velocity.
     @param capsule        Fixed capsule.
     @param outLocation    Location of collision. [Post Condition]
     @param outNormal    Capsule&apos;s surface normal to collision [Post Condition]

     @return Time til collision.  If there is no collision then the return
             value will be inf().
     */</doc>
