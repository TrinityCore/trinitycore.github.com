<inh f='TrinityCore3.3.5/src/server/game/Scripting/ScriptMgr.h' l='189' c='SpellScriptLoader'/>
<def f='TrinityCore3.3.5/src/server/scripts/Spells/spell_paladin.cpp' l='184'/>
<size>16</size>
<doc f='TrinityCore3.3.5/src/server/scripts/Spells/spell_paladin.cpp' l='183'>// 31821 - Aura Mastery</doc>
<inh f='TrinityCore6.x/src/server/game/Scripting/ScriptMgr.h' l='188' c='SpellScriptLoader'/>
<def f='TrinityCore6.x/src/server/scripts/Spells/spell_paladin.cpp' l='168'/>
<size>16</size>
<doc f='TrinityCore6.x/src/server/scripts/Spells/spell_paladin.cpp' l='81'>/*
// 31850 - Ardent Defender
class spell_pal_ardent_defender : public SpellScriptLoader
{
    public:
        spell_pal_ardent_defender() : SpellScriptLoader(&quot;spell_pal_ardent_defender&quot;) { }

        class spell_pal_ardent_defender_AuraScript : public AuraScript
        {
            PrepareAuraScript(spell_pal_ardent_defender_AuraScript);

        public:
            spell_pal_ardent_defender_AuraScript()
            {
                absorbPct = 0;
                healPct = 0;
            }

        private:
            uint32 absorbPct, healPct;

            enum Spell
            {
                PAL_SPELL_ARDENT_DEFENDER_HEAL = 66235,
            };

            bool Load() override
            {
                healPct = GetSpellInfo()-&gt;Effects[EFFECT_1].CalcValue();
                absorbPct = GetSpellInfo()-&gt;Effects[EFFECT_0].CalcValue();
                return GetUnitOwner()-&gt;GetTypeId() == TYPEID_PLAYER;
            }

            void CalculateAmount(AuraEffect const* aurEff, int32 &amp; amount, bool &amp; canBeRecalculated)
            {
                // Set absorbtion amount to unlimited
                amount = -1;
            }

            void Absorb(AuraEffect* aurEff, DamageInfo &amp; dmgInfo, uint32 &amp; absorbAmount)
            {
                Unit* victim = GetTarget();
                int32 remainingHealth = victim-&gt;GetHealth() - dmgInfo.GetDamage();
                uint32 allowedHealth = victim-&gt;CountPctFromMaxHealth(35);
                // If damage kills us
                if (remainingHealth &lt;= 0 &amp;&amp; !victim-&gt;ToPlayer()-&gt;HasSpellCooldown(PAL_SPELL_ARDENT_DEFENDER_HEAL))
                {
                    // Cast healing spell, completely avoid damage
                    absorbAmount = dmgInfo.GetDamage();

                    uint32 defenseSkillValue = victim-&gt;GetDefenseSkillValue();
                    // Max heal when defense skill denies critical hits from raid bosses
                    // Formula: max defense at level + 140 (raiting from gear)
                    uint32 reqDefForMaxHeal  = victim-&gt;getLevel() * 5 + 140;
                    float pctFromDefense = (defenseSkillValue &gt;= reqDefForMaxHeal)
                        ? 1.0f
                        : float(defenseSkillValue) / float(reqDefForMaxHeal);

                    int32 healAmount = int32(victim-&gt;CountPctFromMaxHealth(uint32(healPct * pctFromDefense)));
                    victim-&gt;CastCustomSpell(victim, PAL_SPELL_ARDENT_DEFENDER_HEAL, &amp;healAmount, NULL, NULL, true, NULL, aurEff);
                    victim-&gt;ToPlayer()-&gt;AddSpellCooldown(PAL_SPELL_ARDENT_DEFENDER_HEAL, 0, time(NULL) + 120);
                }
                else if (remainingHealth &lt; int32(allowedHealth))
                {
                    // Reduce damage that brings us under 35% (or full damage if we are already under 35%) by x%
                    uint32 damageToReduce = (victim-&gt;GetHealth() &lt; allowedHealth)
                        ? dmgInfo.GetDamage()
                        : allowedHealth - remainingHealth;
                    absorbAmount = CalculatePct(damageToReduce, absorbPct);
                }
            }

            void Register() override
            {
                 DoEffectCalcAmount += AuraEffectCalcAmountFn(spell_pal_ardent_defender_AuraScript::CalculateAmount, EFFECT_0, SPELL_AURA_SCHOOL_ABSORB);
                 OnEffectAbsorb += AuraEffectAbsorbFn(spell_pal_ardent_defender_AuraScript::Absorb, EFFECT_0);
            }
        };

        AuraScript* GetAuraScript() const override
        {
            return new spell_pal_ardent_defender_AuraScript();
        }
};
*/

// 31821 - Aura Mastery</doc>
