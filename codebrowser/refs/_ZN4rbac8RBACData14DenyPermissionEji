<dec f='TrinityCore3.3.5/src/server/game/Accounts/RBAC.h' l='839' type='rbac::RBACCommandResult rbac::RBACData::DenyPermission(uint32 permissionId, int32 realmId = 0)'/>
<doc f='TrinityCore3.3.5/src/server/game/Accounts/RBAC.h' l='817'>/**
         * @name DenyPermission
         * @brief Denies a permission
         *
         * Denied a permission to the account. If realm is 0 or the permission can not be added
         * No save to db action will be performed.
         *
         * Fails if permission Id does not exists or permission already granted or denied
         *
         * @param permissionId permission to be denied
         * @param realmId realm affected
         *
         * @return Success or failure (with reason) to deny the permission
         *
         * Example Usage:
         * @code
         * // previously defined &quot;RBACData* rbac&quot; with proper initialization
         * uint32 permissionId = 2;
         * if (rbac-&gt;DenyRole(permissionId) == RBAC_ID_DOES_NOT_EXISTS)
         *     TC_LOG_DEBUG(&quot;entities.player&quot;, &quot;Role Id %u does not exists&quot;, permissionId);
         * @endcode
         */</doc>
<def f='TrinityCore3.3.5/src/server/game/Accounts/RBAC.cpp' l='85' type='rbac::RBACCommandResult rbac::RBACData::DenyPermission(uint32 permissionId, int32 realmId = 0)'/>
<use f='TrinityCore3.3.5/src/server/game/Accounts/RBAC.cpp' l='208' u='c' c='_ZN4rbac8RBACData18LoadFromDBCallbackESt10shared_ptrI17PreparedResultSetE'/>
<doc f='TrinityCore3.3.5/src/server/game/Accounts/RBAC.cpp' l='85'>/* = 0*/</doc>
<use f='TrinityCore3.3.5/src/server/scripts/Commands/cs_rbac.cpp' l='221' u='c' c='_ZN18rbac_commandscript25HandleRBACPermDenyCommandEP11ChatHandlerPKc'/>
<dec f='TrinityCore6.x/src/server/game/Accounts/RBAC.h' l='869' type='rbac::RBACCommandResult rbac::RBACData::DenyPermission(uint32 permissionId, int32 realmId = 0)'/>
<doc f='TrinityCore6.x/src/server/game/Accounts/RBAC.h' l='847'>/**
         * @name DenyPermission
         * @brief Denies a permission
         *
         * Denied a permission to the account. If realm is 0 or the permission can not be added
         * No save to db action will be performed.
         *
         * Fails if permission Id does not exists or permission already granted or denied
         *
         * @param permissionId permission to be denied
         * @param realmId realm affected
         *
         * @return Success or failure (with reason) to deny the permission
         *
         * Example Usage:
         * @code
         * // previously defined &quot;RBACData* rbac&quot; with proper initialization
         * uint32 permissionId = 2;
         * if (rbac-&gt;DenyRole(permissionId) == RBAC_ID_DOES_NOT_EXISTS)
         *     TC_LOG_DEBUG(&quot;entities.player&quot;, &quot;Role Id %u does not exists&quot;, permissionId);
         * @endcode
         */</doc>
<def f='TrinityCore6.x/src/server/game/Accounts/RBAC.cpp' l='85' type='rbac::RBACCommandResult rbac::RBACData::DenyPermission(uint32 permissionId, int32 realmId = 0)'/>
<use f='TrinityCore6.x/src/server/game/Accounts/RBAC.cpp' l='208' u='c' c='_ZN4rbac8RBACData18LoadFromDBCallbackESt10shared_ptrI17PreparedResultSetE'/>
<doc f='TrinityCore6.x/src/server/game/Accounts/RBAC.cpp' l='85'>/* = 0*/</doc>
<use f='TrinityCore6.x/src/server/scripts/Commands/cs_rbac.cpp' l='221' u='c' c='_ZN18rbac_commandscript25HandleRBACPermDenyCommandEP11ChatHandlerPKc'/>
