<dec f='TrinityCore3.3.5/dep/g3dlite/include/G3D/CollisionDetection.h' l='942' type='static G3D::Vector3 G3D::CollisionDetection::slideDirection(const class Sphere &amp; sphere, const G3D::Vector3 &amp; velocity, const float collisionTime, const G3D::Vector3 &amp; collisionLocation)'/>
<def f='TrinityCore3.3.5/dep/g3dlite/source/CollisionDetection.cpp' l='1874' type='static G3D::Vector3 G3D::CollisionDetection::slideDirection(const G3D::Sphere &amp; sphere, const G3D::Vector3 &amp; velocity, const float collisionTime, const G3D::Vector3 &amp; collisionLocation)'/>
<doc f='TrinityCore3.3.5/dep/g3dlite/include/G3D/CollisionDetection.h' l='926'>/**
     Finds the direction of slide given a moving sphere, its velocity, the
     time of collision and the collision location.  This function works as
     if the sphere intersects the surface and continues to hug it.

     @note The result will work well for calculating the movement of a player
     who collides with an object and continues moving along the object instead
     of just bouncing off it.

     @param sphere                Moving sphere.
     @param velocity            Sphere&apos;s velocity.
     @param collisionTime        Time of collision
     @param collisionLocation    Collision location.

     @return Direction of slide.
     */</doc>
<dec f='TrinityCore6.x/dep/g3dlite/include/G3D/CollisionDetection.h' l='942' type='static G3D::Vector3 G3D::CollisionDetection::slideDirection(const class Sphere &amp; sphere, const G3D::Vector3 &amp; velocity, const float collisionTime, const G3D::Vector3 &amp; collisionLocation)'/>
<def f='TrinityCore6.x/dep/g3dlite/source/CollisionDetection.cpp' l='1874' type='static G3D::Vector3 G3D::CollisionDetection::slideDirection(const G3D::Sphere &amp; sphere, const G3D::Vector3 &amp; velocity, const float collisionTime, const G3D::Vector3 &amp; collisionLocation)'/>
<doc f='TrinityCore6.x/dep/g3dlite/include/G3D/CollisionDetection.h' l='926'>/**
     Finds the direction of slide given a moving sphere, its velocity, the
     time of collision and the collision location.  This function works as
     if the sphere intersects the surface and continues to hug it.

     @note The result will work well for calculating the movement of a player
     who collides with an object and continues moving along the object instead
     of just bouncing off it.

     @param sphere                Moving sphere.
     @param velocity            Sphere&apos;s velocity.
     @param collisionTime        Time of collision
     @param collisionLocation    Collision location.

     @return Direction of slide.
     */</doc>
