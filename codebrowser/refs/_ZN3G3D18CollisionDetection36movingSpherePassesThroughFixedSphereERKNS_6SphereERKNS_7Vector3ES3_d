<dec f='TrinityCore3.3.5/dep/g3dlite/include/G3D/CollisionDetection.h' l='1099' type='static bool G3D::CollisionDetection::movingSpherePassesThroughFixedSphere(const G3D::Sphere &amp; sphere, const G3D::Vector3 &amp; velocity, const G3D::Sphere &amp; fixedSphere, double timeLimit = inf())'/>
<def f='TrinityCore3.3.5/dep/g3dlite/source/CollisionDetection.cpp' l='2225' type='static bool G3D::CollisionDetection::movingSpherePassesThroughFixedSphere(const G3D::Sphere &amp; sphere, const G3D::Vector3 &amp; velocity, const G3D::Sphere &amp; fixedSphere, double timeLimit = inf())'/>
<doc f='TrinityCore3.3.5/dep/g3dlite/include/G3D/CollisionDetection.h' l='1084'>/**
     Tests for the intersection of a moving sphere and a fixed sphere in a
     given time limit.

     @note This function will not detect an intersection between a moving object
     that is already interpenetrating the fixed object.

     @param sphere         Moving sphere.
     @param velocity     Velocity of moving sphere.
     @param fixedSphere Fixed sphere.
     @param timeLimit     Time limit for intersection test.

     @return true  -  if the two spheres will touch.
     @return false - if there is no intersection.
     */</doc>
<dec f='TrinityCore6.x/dep/g3dlite/include/G3D/CollisionDetection.h' l='1099' type='static bool G3D::CollisionDetection::movingSpherePassesThroughFixedSphere(const G3D::Sphere &amp; sphere, const G3D::Vector3 &amp; velocity, const G3D::Sphere &amp; fixedSphere, double timeLimit = inf())'/>
<def f='TrinityCore6.x/dep/g3dlite/source/CollisionDetection.cpp' l='2225' type='static bool G3D::CollisionDetection::movingSpherePassesThroughFixedSphere(const G3D::Sphere &amp; sphere, const G3D::Vector3 &amp; velocity, const G3D::Sphere &amp; fixedSphere, double timeLimit = inf())'/>
<doc f='TrinityCore6.x/dep/g3dlite/include/G3D/CollisionDetection.h' l='1084'>/**
     Tests for the intersection of a moving sphere and a fixed sphere in a
     given time limit.

     @note This function will not detect an intersection between a moving object
     that is already interpenetrating the fixed object.

     @param sphere         Moving sphere.
     @param velocity     Velocity of moving sphere.
     @param fixedSphere Fixed sphere.
     @param timeLimit     Time limit for intersection test.

     @return true  -  if the two spheres will touch.
     @return false - if there is no intersection.
     */</doc>
