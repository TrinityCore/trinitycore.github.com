<inh f='include/boost/program_options/errors.hpp' l='32' c='boost::program_options::error'/>
<def f='include/boost/program_options/errors.hpp' l='88'/>
<ovr f='include/boost/program_options/errors.hpp' l='201' c='boost::program_options::multiple_values'/>
<ovr f='include/boost/program_options/errors.hpp' l='212' c='boost::program_options::multiple_occurrences'/>
<ovr f='include/boost/program_options/errors.hpp' l='222' c='boost::program_options::required_option'/>
<ovr f='include/boost/program_options/errors.hpp' l='244' c='boost::program_options::error_with_no_option_name'/>
<ovr f='include/boost/program_options/errors.hpp' l='296' c='boost::program_options::invalid_syntax'/>
<ovr f='include/boost/program_options/errors.hpp' l='357' c='boost::program_options::validation_error'/>
<size>136</size>
<doc f='include/boost/program_options/errors.hpp' l='65'>/** Base class for most exceptions in the library.
     *  
     *  Substitutes the values for the parameter name
     *      placeholders in the template to create the human
     *      readable error message
     *  
     *  Placeholders are surrounded by % signs: %example%
     *      Poor man&apos;s version of boost::format
     *  
     *  If a parameter name is absent, perform default substitutions
     *      instead so ugly placeholders are never left in-place.
     *  
     *  Options are displayed in &quot;canonical&quot; form
     *      This is the most unambiguous form of the
     *      *parsed* option name and would correspond to
     *      option_description::format_name()
     *      i.e. what is shown by print_usage()
     *  
     *  The &quot;canonical&quot; form depends on whether the option is
     *      specified in short or long form, using dashes or slashes
     *      or without a prefix (from a configuration file)
     *  
     *   */</doc>
