<dec f='TrinityCore3.3.5/dep/g3dlite/include/G3D/Matrix3.h' l='206' type='static void G3D::Matrix3::_mul(const G3D::Matrix3 &amp; A, const G3D::Matrix3 &amp; B, G3D::Matrix3 &amp; out)'/>
<use f='TrinityCore3.3.5/dep/g3dlite/include/G3D/Matrix3.h' l='219' u='c' c='_ZN3G3D7Matrix33mulERKS0_S2_RS0_'/>
<doc f='TrinityCore3.3.5/dep/g3dlite/include/G3D/Matrix3.h' l='205'>/** Multiplication where out != A and out != B */</doc>
<def f='TrinityCore3.3.5/dep/g3dlite/source/Matrix3.cpp' l='1869' type='static void G3D::Matrix3::_mul(const G3D::Matrix3 &amp; A, const G3D::Matrix3 &amp; B, G3D::Matrix3 &amp; out)'/>
<doc f='TrinityCore3.3.5/dep/g3dlite/source/Matrix3.cpp' l='1860'>//----------------------------------------------------------------------------

// Runs in 52 cycles on AMD, 76 cycles on Intel Centrino
//
// The loop unrolling is necessary for performance. 
// I was unable to improve performance further by flattening the matrices
// into float*&apos;s instead of 2D arrays.  
//
// -morgan</doc>
<dec f='TrinityCore6.x/dep/g3dlite/include/G3D/Matrix3.h' l='206' type='static void G3D::Matrix3::_mul(const G3D::Matrix3 &amp; A, const G3D::Matrix3 &amp; B, G3D::Matrix3 &amp; out)'/>
<use f='TrinityCore6.x/dep/g3dlite/include/G3D/Matrix3.h' l='219' u='c' c='_ZN3G3D7Matrix33mulERKS0_S2_RS0_'/>
<doc f='TrinityCore6.x/dep/g3dlite/include/G3D/Matrix3.h' l='205'>/** Multiplication where out != A and out != B */</doc>
<def f='TrinityCore6.x/dep/g3dlite/source/Matrix3.cpp' l='1869' type='static void G3D::Matrix3::_mul(const G3D::Matrix3 &amp; A, const G3D::Matrix3 &amp; B, G3D::Matrix3 &amp; out)'/>
<doc f='TrinityCore6.x/dep/g3dlite/source/Matrix3.cpp' l='1860'>//----------------------------------------------------------------------------

// Runs in 52 cycles on AMD, 76 cycles on Intel Centrino
//
// The loop unrolling is necessary for performance. 
// I was unable to improve performance further by flattening the matrices
// into float*&apos;s instead of 2D arrays.  
//
// -morgan</doc>
