<dec f='TrinityCore3.3.5/dep/g3dlite/include/G3D/Any.h' l='632' type='G3D::Any &amp; G3D::Any::operator[](const std::string &amp; key)'/>
<use f='TrinityCore3.3.5/dep/g3dlite/include/G3D/Any.h' l='636' u='c' c='_ZN3G3D3AnyixEPKc'/>
<use f='TrinityCore3.3.5/dep/g3dlite/include/G3D/Any.h' l='926' u='c' c='_ZN3G3D14AnyTableReader3getERKSsRSs'/>
<use f='TrinityCore3.3.5/dep/g3dlite/include/G3D/Any.h' l='932' u='c' c='_ZN3G3D14AnyTableReader3getERKSsRh'/>
<use f='TrinityCore3.3.5/dep/g3dlite/include/G3D/Any.h' l='938' u='c' c='_ZN3G3D14AnyTableReader3getERKSsRt'/>
<use f='TrinityCore3.3.5/dep/g3dlite/include/G3D/Any.h' l='945' u='c' c='_ZN3G3D14AnyTableReader3getERKSsRNS_5ArrayIT_Lm10EEE'/>
<use f='TrinityCore3.3.5/dep/g3dlite/include/G3D/Any.h' l='951' u='c' c='_ZN3G3D14AnyTableReader3getERKSsRNS_5TableISsT_9HashTraitISsE11EqualsTraitISsEEE'/>
<use f='TrinityCore3.3.5/dep/g3dlite/include/G3D/Any.h' l='966' u='c' c='_ZN3G3D14AnyTableReader3getERKSsRT_'/>
<use f='TrinityCore3.3.5/dep/g3dlite/include/G3D/Any.h' l='973' u='c' c='_ZN3G3D14AnyTableReaderixERKSs'/>
<doc f='TrinityCore3.3.5/dep/g3dlite/include/G3D/Any.h' l='609'>/** 
        Fetch an element from a table.  This can be used as:

        &lt;pre&gt;
        a[&quot;key&quot;] = value;  (create the key if it did not exist)
        &lt;/pre&gt;
        
        or

        &lt;pre&gt;
        value = a[&quot;key&quot;];  (throw an error if the key did not exist)
        &lt;/pre&gt;

        &lt;b&gt;Note:&lt;/b&gt;
        In order to cause elements to be correctly created in the
        first case while still providing &quot;key not found&quot; errors in the
        second case, the Any returned is a special object that delays
        the actual fetch until the following assignment or method
        call.  This means that in the event of an error, the exception
        may be thrown from a line other than the actual fetch.  Use
        the Any::get() or the const Any::operator[]() methods to avoid
        this behavior and ensure error-checking at fetch time.
     */</doc>
<def f='TrinityCore3.3.5/dep/g3dlite/source/Any.cpp' l='736' type='G3D::Any &amp; G3D::Any::operator[](const std::string &amp; key)'/>
<dec f='TrinityCore6.x/dep/g3dlite/include/G3D/Any.h' l='632' type='G3D::Any &amp; G3D::Any::operator[](const std::string &amp; key)'/>
<use f='TrinityCore6.x/dep/g3dlite/include/G3D/Any.h' l='636' u='c' c='_ZN3G3D3AnyixEPKc'/>
<use f='TrinityCore6.x/dep/g3dlite/include/G3D/Any.h' l='926' u='c' c='_ZN3G3D14AnyTableReader3getERKSsRSs'/>
<use f='TrinityCore6.x/dep/g3dlite/include/G3D/Any.h' l='932' u='c' c='_ZN3G3D14AnyTableReader3getERKSsRh'/>
<use f='TrinityCore6.x/dep/g3dlite/include/G3D/Any.h' l='938' u='c' c='_ZN3G3D14AnyTableReader3getERKSsRt'/>
<use f='TrinityCore6.x/dep/g3dlite/include/G3D/Any.h' l='945' u='c' c='_ZN3G3D14AnyTableReader3getERKSsRNS_5ArrayIT_Lm10EEE'/>
<use f='TrinityCore6.x/dep/g3dlite/include/G3D/Any.h' l='951' u='c' c='_ZN3G3D14AnyTableReader3getERKSsRNS_5TableISsT_9HashTraitISsE11EqualsTraitISsEEE'/>
<use f='TrinityCore6.x/dep/g3dlite/include/G3D/Any.h' l='966' u='c' c='_ZN3G3D14AnyTableReader3getERKSsRT_'/>
<use f='TrinityCore6.x/dep/g3dlite/include/G3D/Any.h' l='973' u='c' c='_ZN3G3D14AnyTableReaderixERKSs'/>
<doc f='TrinityCore6.x/dep/g3dlite/include/G3D/Any.h' l='609'>/** 
        Fetch an element from a table.  This can be used as:

        &lt;pre&gt;
        a[&quot;key&quot;] = value;  (create the key if it did not exist)
        &lt;/pre&gt;
        
        or

        &lt;pre&gt;
        value = a[&quot;key&quot;];  (throw an error if the key did not exist)
        &lt;/pre&gt;

        &lt;b&gt;Note:&lt;/b&gt;
        In order to cause elements to be correctly created in the
        first case while still providing &quot;key not found&quot; errors in the
        second case, the Any returned is a special object that delays
        the actual fetch until the following assignment or method
        call.  This means that in the event of an error, the exception
        may be thrown from a line other than the actual fetch.  Use
        the Any::get() or the const Any::operator[]() methods to avoid
        this behavior and ensure error-checking at fetch time.
     */</doc>
<def f='TrinityCore6.x/dep/g3dlite/source/Any.cpp' l='736' type='G3D::Any &amp; G3D::Any::operator[](const std::string &amp; key)'/>
