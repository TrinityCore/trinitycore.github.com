<def f='include/boost/asio/basic_deadline_timer.hpp' l='213' type='std::size_t boost::asio::basic_deadline_timer::cancel()'/>
<use f='TrinityCore3.3.5/src/server/authserver/Main.cpp' l='192' u='c' c='main'/>
<use f='TrinityCore3.3.5/src/server/authserver/Main.cpp' l='193' u='c' c='main'/>
<doc f='include/boost/asio/basic_deadline_timer.hpp' l='192'>/**
   * This function forces the completion of any pending asynchronous wait
   * operations against the timer. The handler for each cancelled operation will
   * be invoked with the boost::asio::error::operation_aborted error code.
   *
   * Cancelling the timer does not change the expiry time.
   *
   * @return The number of asynchronous operations that were cancelled.
   *
   * @throws boost::system::system_error Thrown on failure.
   *
   * @note If the timer has already expired when cancel() is called, then the
   * handlers for asynchronous wait operations will:
   *
   * @li have already been invoked; or
   *
   * @li have been queued for invocation in the near future.
   *
   * These handlers can no longer be cancelled, and therefore are passed an
   * error code that indicates the successful completion of the wait operation.
   */</doc>
<use f='TrinityCore3.3.5/src/server/authserver/Realms/RealmList.cpp' l='46' u='c' c='_ZN9RealmList5CloseEv'/>
<use f='TrinityCore6.x/src/server/bnetserver/Main.cpp' l='208' u='c' c='main'/>
<use f='TrinityCore6.x/src/server/bnetserver/Main.cpp' l='209' u='c' c='main'/>
<use f='TrinityCore6.x/src/server/bnetserver/Realms/RealmList.cpp' l='55' u='c' c='_ZN9RealmList5CloseEv'/>
