<dec f='TrinityCore3.3.5/dep/g3dlite/include/G3D/Ray.h' l='145' type='float G3D::Ray::intersectionTime(const class Sphere &amp; sphere, bool solid = false) const'/>
<doc f='TrinityCore3.3.5/dep/g3dlite/include/G3D/Ray.h' l='131'>/**
     Returns the distance until intersection with the sphere or the (solid) ball bounded by the sphere.
     Will be 0 if inside the sphere, inf if there is no intersection.

     The ray direction is &lt;B&gt;not&lt;/B&gt; normalized.  If the ray direction
     has unit length, the distance from the origin to intersection
     is equal to the time.  If the direction does not have unit length,
     the distance = time * direction.length().

     See also the G3D::CollisionDetection &quot;movingPoint&quot; methods,
     which give more information about the intersection.

     \param solid If true, rays inside the sphere immediately intersect (good for collision detection).  If false, they hit the opposite side of the sphere (good for ray tracing).
     */</doc>
<def f='TrinityCore3.3.5/dep/g3dlite/source/Ray.cpp' l='179' type='float G3D::Ray::intersectionTime(const class Sphere &amp; sphere, bool solid = false) const'/>
<dec f='TrinityCore6.x/dep/g3dlite/include/G3D/Ray.h' l='145' type='float G3D::Ray::intersectionTime(const class Sphere &amp; sphere, bool solid = false) const'/>
<doc f='TrinityCore6.x/dep/g3dlite/include/G3D/Ray.h' l='131'>/**
     Returns the distance until intersection with the sphere or the (solid) ball bounded by the sphere.
     Will be 0 if inside the sphere, inf if there is no intersection.

     The ray direction is &lt;B&gt;not&lt;/B&gt; normalized.  If the ray direction
     has unit length, the distance from the origin to intersection
     is equal to the time.  If the direction does not have unit length,
     the distance = time * direction.length().

     See also the G3D::CollisionDetection &quot;movingPoint&quot; methods,
     which give more information about the intersection.

     \param solid If true, rays inside the sphere immediately intersect (good for collision detection).  If false, they hit the opposite side of the sphere (good for ray tracing).
     */</doc>
<def f='TrinityCore6.x/dep/g3dlite/source/Ray.cpp' l='179' type='float G3D::Ray::intersectionTime(const class Sphere &amp; sphere, bool solid = false) const'/>
