<dec f='TrinityCore3.3.5/dep/recastnavigation/Detour/Include/DetourNavMeshQuery.h' l='386' type='dtStatus dtNavMeshQuery::findDistanceToWall(dtPolyRef startRef, const float * centerPos, const float maxRadius, const dtQueryFilter * filter, float * hitDist, float * hitPos, float * hitNormal) const'/>
<def f='TrinityCore3.3.5/dep/recastnavigation/Detour/Source/DetourNavMeshQuery.cpp' l='3328' type='dtStatus dtNavMeshQuery::findDistanceToWall(dtPolyRef startRef, const float * centerPos, const float maxRadius, const dtQueryFilter * filter, float * hitDist, float * hitPos, float * hitNormal) const'/>
<doc f='TrinityCore3.3.5/dep/recastnavigation/Detour/Source/DetourNavMeshQuery.cpp' l='3318'>/// @par
///
/// @p hitPos is not adjusted using the height detail data.
///
/// @p hitDist will equal the search radius if there is no wall within the 
/// radius. In this case the values of @p hitPos and @p hitNormal are
/// undefined.
///
/// The normal will become unpredicable if @p hitDist is a very small number.
///</doc>
<doc f='TrinityCore3.3.5/dep/recastnavigation/Detour/Include/DetourNavMeshQuery.h' l='376'>/// Finds the distance from the specified position to the nearest polygon wall.
	///  @param[in]		startRef		The reference id of the polygon containing @p centerPos.
	///  @param[in]		centerPos		The center of the search circle. [(x, y, z)]
	///  @param[in]		maxRadius		The radius of the search circle.
	///  @param[in]		filter			The polygon filter to apply to the query.
	///  @param[out]	hitDist			The distance to the nearest wall from @p centerPos.
	///  @param[out]	hitPos			The nearest position on the wall that was hit. [(x, y, z)]
	///  @param[out]	hitNormal		The normalized ray formed from the wall point to the 
	///  								source point. [(x, y, z)]
	/// @returns The status flags for the query.</doc>
<dec f='TrinityCore6.x/dep/recastnavigation/Detour/Include/DetourNavMeshQuery.h' l='386' type='dtStatus dtNavMeshQuery::findDistanceToWall(dtPolyRef startRef, const float * centerPos, const float maxRadius, const dtQueryFilter * filter, float * hitDist, float * hitPos, float * hitNormal) const'/>
<def f='TrinityCore6.x/dep/recastnavigation/Detour/Source/DetourNavMeshQuery.cpp' l='3328' type='dtStatus dtNavMeshQuery::findDistanceToWall(dtPolyRef startRef, const float * centerPos, const float maxRadius, const dtQueryFilter * filter, float * hitDist, float * hitPos, float * hitNormal) const'/>
<doc f='TrinityCore6.x/dep/recastnavigation/Detour/Source/DetourNavMeshQuery.cpp' l='3318'>/// @par
///
/// @p hitPos is not adjusted using the height detail data.
///
/// @p hitDist will equal the search radius if there is no wall within the 
/// radius. In this case the values of @p hitPos and @p hitNormal are
/// undefined.
///
/// The normal will become unpredicable if @p hitDist is a very small number.
///</doc>
<doc f='TrinityCore6.x/dep/recastnavigation/Detour/Include/DetourNavMeshQuery.h' l='376'>/// Finds the distance from the specified position to the nearest polygon wall.
	///  @param[in]		startRef		The reference id of the polygon containing @p centerPos.
	///  @param[in]		centerPos		The center of the search circle. [(x, y, z)]
	///  @param[in]		maxRadius		The radius of the search circle.
	///  @param[in]		filter			The polygon filter to apply to the query.
	///  @param[out]	hitDist			The distance to the nearest wall from @p centerPos.
	///  @param[out]	hitPos			The nearest position on the wall that was hit. [(x, y, z)]
	///  @param[out]	hitNormal		The normalized ray formed from the wall point to the 
	///  								source point. [(x, y, z)]
	/// @returns The status flags for the query.</doc>
