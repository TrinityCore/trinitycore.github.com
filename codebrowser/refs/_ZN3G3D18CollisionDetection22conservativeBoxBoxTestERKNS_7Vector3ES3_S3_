<dec f='TrinityCore3.3.5/dep/g3dlite/include/G3D/CollisionDetection.h' l='250' type='static bool G3D::CollisionDetection::conservativeBoxBoxTest(const G3D::Vector3 &amp; a, const G3D::Vector3 &amp; b, const G3D::Vector3 &amp; D)'/>
<def f='TrinityCore3.3.5/dep/g3dlite/source/CollisionDetection.cpp' l='239' type='static bool G3D::CollisionDetection::conservativeBoxBoxTest(const G3D::Vector3 &amp; a, const G3D::Vector3 &amp; b, const G3D::Vector3 &amp; D)'/>
<doc f='TrinityCore3.3.5/dep/g3dlite/include/G3D/CollisionDetection.h' l='236'>/**
      Performs a simple bounding sphere check between two boxes to determine
      whether these boxes could &lt;i&gt;possibly&lt;/i&gt; intersect.  This is a very
      cheap operation (three dot products, two sqrts and a few others).  If
      it returns true, an intersection is possible, but not necessarily
      guaranteed.

      @param a Vector from box A&apos;s center to an outer vertex
      @param b Vector from box B&apos;s center to an outer vertex
      @param D Distance between the centers of the two boxes

      @return true - if possible intersection
      @return false - otherwise (This does not guarantee an intersection)
     */</doc>
<dec f='TrinityCore6.x/dep/g3dlite/include/G3D/CollisionDetection.h' l='250' type='static bool G3D::CollisionDetection::conservativeBoxBoxTest(const G3D::Vector3 &amp; a, const G3D::Vector3 &amp; b, const G3D::Vector3 &amp; D)'/>
<def f='TrinityCore6.x/dep/g3dlite/source/CollisionDetection.cpp' l='239' type='static bool G3D::CollisionDetection::conservativeBoxBoxTest(const G3D::Vector3 &amp; a, const G3D::Vector3 &amp; b, const G3D::Vector3 &amp; D)'/>
<doc f='TrinityCore6.x/dep/g3dlite/include/G3D/CollisionDetection.h' l='236'>/**
      Performs a simple bounding sphere check between two boxes to determine
      whether these boxes could &lt;i&gt;possibly&lt;/i&gt; intersect.  This is a very
      cheap operation (three dot products, two sqrts and a few others).  If
      it returns true, an intersection is possible, but not necessarily
      guaranteed.

      @param a Vector from box A&apos;s center to an outer vertex
      @param b Vector from box B&apos;s center to an outer vertex
      @param D Distance between the centers of the two boxes

      @return true - if possible intersection
      @return false - otherwise (This does not guarantee an intersection)
     */</doc>
