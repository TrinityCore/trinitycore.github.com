<dec f='TrinityCore3.3.5/dep/g3dlite/include/G3D/PhysicsFrame.h' l='79' type='G3D::PhysicsFrame G3D::PhysicsFrame::lerp(const G3D::PhysicsFrame &amp; other, float alpha) const'/>
<doc f='TrinityCore3.3.5/dep/g3dlite/include/G3D/PhysicsFrame.h' l='76'>/**
     Linear interpolation (spherical linear for the rotations).
     */</doc>
<def f='TrinityCore3.3.5/dep/g3dlite/source/PhysicsFrame.cpp' l='100' type='G3D::PhysicsFrame G3D::PhysicsFrame::lerp(const G3D::PhysicsFrame &amp; other, float alpha) const'/>
<dec f='TrinityCore6.x/dep/g3dlite/include/G3D/PhysicsFrame.h' l='79' type='G3D::PhysicsFrame G3D::PhysicsFrame::lerp(const G3D::PhysicsFrame &amp; other, float alpha) const'/>
<doc f='TrinityCore6.x/dep/g3dlite/include/G3D/PhysicsFrame.h' l='76'>/**
     Linear interpolation (spherical linear for the rotations).
     */</doc>
<def f='TrinityCore6.x/dep/g3dlite/source/PhysicsFrame.cpp' l='100' type='G3D::PhysicsFrame G3D::PhysicsFrame::lerp(const G3D::PhysicsFrame &amp; other, float alpha) const'/>
