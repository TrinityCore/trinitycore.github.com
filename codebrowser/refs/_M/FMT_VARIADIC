<dec f='TrinityCore3.3.5/dep/cppformat/format.h' l='3314'/>
<use f='TrinityCore3.3.5/dep/cppformat/format.h' l='3343' u='c'/>
<use f='TrinityCore3.3.5/dep/cppformat/format.h' l='3345' u='c'/>
<use f='TrinityCore3.3.5/dep/cppformat/format.h' l='3346' u='c'/>
<use f='TrinityCore3.3.5/dep/cppformat/format.h' l='3348' u='c'/>
<use f='TrinityCore3.3.5/dep/cppformat/format.h' l='3349' u='c'/>
<use f='TrinityCore3.3.5/dep/cppformat/format.h' l='3351' u='c'/>
<use f='TrinityCore3.3.5/dep/cppformat/format.h' l='3352' u='c'/>
<use f='TrinityCore3.3.5/dep/cppformat/format.h' l='3365' u='c'/>
<doc f='TrinityCore3.3.5/dep/cppformat/format.h' l='3287'>/**
  \rst
  Defines a variadic function with the specified return type, function name
  and argument types passed as variable arguments to this macro.

  **Example**::

    void print_error(const char *file, int line, const char *format,
                     fmt::ArgList args) {
      fmt::print(&quot;{}: {}: &quot;, file, line);
      fmt::print(format, args);
    }
    FMT_VARIADIC(void, print_error, const char *, int, const char *)

  ``FMT_VARIADIC`` is used for compatibility with legacy C++ compilers that
  don&apos;t implement variadic templates. You don&apos;t have to use this macro if
  you don&apos;t need legacy compiler support and can use variadic templates
  directly::

    template &lt;typename... Args&gt;
    void print_error(const char *file, int line, const char *format,
                     const Args &amp; ... args) {
      fmt::print(&quot;{}: {}: &quot;, file, line);
      fmt::print(format, args...);
    }
  \endrst
 */</doc>
<dec f='TrinityCore6.x/dep/cppformat/format.h' l='3314'/>
<use f='TrinityCore6.x/dep/cppformat/format.h' l='3343' u='c'/>
<use f='TrinityCore6.x/dep/cppformat/format.h' l='3345' u='c'/>
<use f='TrinityCore6.x/dep/cppformat/format.h' l='3346' u='c'/>
<use f='TrinityCore6.x/dep/cppformat/format.h' l='3348' u='c'/>
<use f='TrinityCore6.x/dep/cppformat/format.h' l='3349' u='c'/>
<use f='TrinityCore6.x/dep/cppformat/format.h' l='3351' u='c'/>
<use f='TrinityCore6.x/dep/cppformat/format.h' l='3352' u='c'/>
<use f='TrinityCore6.x/dep/cppformat/format.h' l='3365' u='c'/>
<doc f='TrinityCore6.x/dep/cppformat/format.h' l='3287'>/**
  \rst
  Defines a variadic function with the specified return type, function name
  and argument types passed as variable arguments to this macro.

  **Example**::

    void print_error(const char *file, int line, const char *format,
                     fmt::ArgList args) {
      fmt::print(&quot;{}: {}: &quot;, file, line);
      fmt::print(format, args);
    }
    FMT_VARIADIC(void, print_error, const char *, int, const char *)

  ``FMT_VARIADIC`` is used for compatibility with legacy C++ compilers that
  don&apos;t implement variadic templates. You don&apos;t have to use this macro if
  you don&apos;t need legacy compiler support and can use variadic templates
  directly::

    template &lt;typename... Args&gt;
    void print_error(const char *file, int line, const char *format,
                     const Args &amp; ... args) {
      fmt::print(&quot;{}: {}: &quot;, file, line);
      fmt::print(format, args...);
    }
  \endrst
 */</doc>
