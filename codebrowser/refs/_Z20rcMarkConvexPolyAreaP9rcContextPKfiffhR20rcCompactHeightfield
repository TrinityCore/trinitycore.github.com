<dec f='TrinityCore3.3.5/dep/recastnavigation/Recast/Include/Recast.h' l='939' type='void rcMarkConvexPolyArea(rcContext * ctx, const float * verts, const int nverts, const float hmin, const float hmax, unsigned char areaId, rcCompactHeightfield &amp; chf)'/>
<doc f='TrinityCore3.3.5/dep/recastnavigation/Recast/Include/Recast.h' l='930'>/// Applies the area id to the all spans within the specified convex polygon. 
///  @ingroup recast
///  @param[in,out]	ctx		The build context to use during the operation.
///  @param[in]		verts	The vertices of the polygon [Fomr: (x, y, z) * @p nverts]
///  @param[in]		nverts	The number of vertices in the polygon.
///  @param[in]		hmin	The height of the base of the polygon.
///  @param[in]		hmax	The height of the top of the polygon.
///  @param[in]		areaId	The area id to apply. [Limit: &lt;= #RC_WALKABLE_AREA]
///  @param[in,out]	chf		A populated compact heightfield.</doc>
<def f='TrinityCore3.3.5/dep/recastnavigation/Recast/Source/RecastArea.cpp' l='388' type='void rcMarkConvexPolyArea(rcContext * ctx, const float * verts, const int nverts, const float hmin, const float hmax, unsigned char areaId, rcCompactHeightfield &amp; chf)'/>
<doc f='TrinityCore3.3.5/dep/recastnavigation/Recast/Source/RecastArea.cpp' l='380'>/// @par
///
/// The value of spacial parameters are in world units.
/// 
/// The y-values of the polygon vertices are ignored. So the polygon is effectively 
/// projected onto the xz-plane at @p hmin, then extruded to @p hmax.
/// 
/// @see rcCompactHeightfield, rcMedianFilterWalkableArea</doc>
<dec f='TrinityCore6.x/dep/recastnavigation/Recast/Include/Recast.h' l='939' type='void rcMarkConvexPolyArea(rcContext * ctx, const float * verts, const int nverts, const float hmin, const float hmax, unsigned char areaId, rcCompactHeightfield &amp; chf)'/>
<doc f='TrinityCore6.x/dep/recastnavigation/Recast/Include/Recast.h' l='930'>/// Applies the area id to the all spans within the specified convex polygon. 
///  @ingroup recast
///  @param[in,out]	ctx		The build context to use during the operation.
///  @param[in]		verts	The vertices of the polygon [Fomr: (x, y, z) * @p nverts]
///  @param[in]		nverts	The number of vertices in the polygon.
///  @param[in]		hmin	The height of the base of the polygon.
///  @param[in]		hmax	The height of the top of the polygon.
///  @param[in]		areaId	The area id to apply. [Limit: &lt;= #RC_WALKABLE_AREA]
///  @param[in,out]	chf		A populated compact heightfield.</doc>
<def f='TrinityCore6.x/dep/recastnavigation/Recast/Source/RecastArea.cpp' l='388' type='void rcMarkConvexPolyArea(rcContext * ctx, const float * verts, const int nverts, const float hmin, const float hmax, unsigned char areaId, rcCompactHeightfield &amp; chf)'/>
<doc f='TrinityCore6.x/dep/recastnavigation/Recast/Source/RecastArea.cpp' l='380'>/// @par
///
/// The value of spacial parameters are in world units.
/// 
/// The y-values of the polygon vertices are ignored. So the polygon is effectively 
/// projected onto the xz-plane at @p hmin, then extruded to @p hmax.
/// 
/// @see rcCompactHeightfield, rcMedianFilterWalkableArea</doc>
