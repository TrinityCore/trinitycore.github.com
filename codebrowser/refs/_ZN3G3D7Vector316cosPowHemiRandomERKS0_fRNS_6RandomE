<dec f='TrinityCore3.3.5/dep/g3dlite/include/G3D/Vector3.h' l='401' type='static G3D::Vector3 G3D::Vector3::cosPowHemiRandom(const G3D::Vector3 &amp; n, const float k, G3D::Random &amp; r = Random::common())'/>
<doc f='TrinityCore3.3.5/dep/g3dlite/include/G3D/Vector3.h' l='388'>/** \brief Random unit vector, distributed according to \f$\max(\cos^k \theta,0)\f$.

        That is, so that the probability of \f$\vec{V}\f$ is
        proportional to \f$\max((\vec{v} \cdot \vec{n})^k, 0)\f$.
        Useful in photon mapping for glossy scattering.

        Distribution rendered by G3D::DirectionHistogram:
        \image html vector3-cospowhemirandom.png

        \param n Unit vector at the center of the distribution.

        @cite Ashikhmin and Shirley, An anisotropic Phong BRDF model, Journal of Graphics Tools, 2002
    */</doc>
<def f='TrinityCore3.3.5/dep/g3dlite/source/Vector3.cpp' l='283' type='static G3D::Vector3 G3D::Vector3::cosPowHemiRandom(const G3D::Vector3 &amp; normal, const float k, G3D::Random &amp; r = Random::common())'/>
<dec f='TrinityCore6.x/dep/g3dlite/include/G3D/Vector3.h' l='401' type='static G3D::Vector3 G3D::Vector3::cosPowHemiRandom(const G3D::Vector3 &amp; n, const float k, G3D::Random &amp; r = Random::common())'/>
<doc f='TrinityCore6.x/dep/g3dlite/include/G3D/Vector3.h' l='388'>/** \brief Random unit vector, distributed according to \f$\max(\cos^k \theta,0)\f$.

        That is, so that the probability of \f$\vec{V}\f$ is
        proportional to \f$\max((\vec{v} \cdot \vec{n})^k, 0)\f$.
        Useful in photon mapping for glossy scattering.

        Distribution rendered by G3D::DirectionHistogram:
        \image html vector3-cospowhemirandom.png

        \param n Unit vector at the center of the distribution.

        @cite Ashikhmin and Shirley, An anisotropic Phong BRDF model, Journal of Graphics Tools, 2002
    */</doc>
<def f='TrinityCore6.x/dep/g3dlite/source/Vector3.cpp' l='283' type='static G3D::Vector3 G3D::Vector3::cosPowHemiRandom(const G3D::Vector3 &amp; normal, const float k, G3D::Random &amp; r = Random::common())'/>
