<dec f='TrinityCore6.x/dep/CascLib/src/jenkins/lookup.h' l='18' type='void hashlittle2(const void * key, size_t length, uint32_t * pc, uint32_t * pb)'/>
<use f='TrinityCore6.x/dep/CascLib/src/CascOpenStorage.cpp' l='161' u='c' c='_ZL20IsCascIndexHeader_V2Phj'/>
<use f='TrinityCore6.x/dep/CascLib/src/CascOpenStorage.cpp' l='441' u='c' c='_ZL27VerifyAndParseKeyMapping_V2P19_CASC_MAPPING_TABLEj'/>
<use f='TrinityCore6.x/dep/CascLib/src/common/Common.cpp' l='271' u='c' c='_Z16CalcFileNameHashPKc'/>
<def f='TrinityCore6.x/dep/CascLib/src/jenkins/lookup3.c' l='464' type='void hashlittle2(const void * key, size_t length, uint32_t * pc, uint32_t * pb)'/>
<doc f='TrinityCore6.x/dep/CascLib/src/jenkins/lookup3.c' l='454'>/*
 * hashlittle2: return 2 32-bit hash values
 *
 * This is identical to hashlittle(), except it returns two 32-bit hash
 * values instead of just one.  This is good enough for hash table
 * lookup with 2^^64 buckets, or if you want a second hash if you&apos;re not
 * happy with the first, or if you want a probably-unique 64-bit ID for
 * the key.  *pc is better mixed than *pb, so use *pc first.  If you want
 * a 64-bit value do something like &quot;*pc + (((uint64_t)*pb)&lt;&lt;32)&quot;.
 */</doc>
