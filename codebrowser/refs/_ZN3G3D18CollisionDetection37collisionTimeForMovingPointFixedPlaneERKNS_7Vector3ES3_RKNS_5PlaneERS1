<dec f='TrinityCore3.3.5/dep/g3dlite/include/G3D/CollisionDetection.h' l='463' type='static float G3D::CollisionDetection::collisionTimeForMovingPointFixedPlane(const G3D::Vector3 &amp; point, const G3D::Vector3 &amp; velocity, const class Plane &amp; plane, G3D::Vector3 &amp; outLocation, G3D::Vector3 &amp; outNormal = ignore)'/>
<def f='TrinityCore3.3.5/dep/g3dlite/source/CollisionDetection.cpp' l='847' type='static float G3D::CollisionDetection::collisionTimeForMovingPointFixedPlane(const G3D::Vector3 &amp; point, const G3D::Vector3 &amp; velocity, const G3D::Plane &amp; plane, G3D::Vector3 &amp; location, G3D::Vector3 &amp; outNormal = ignore)'/>
<use f='TrinityCore3.3.5/dep/g3dlite/source/CollisionDetection.cpp' l='1320' u='c' c='_ZN3G3D18CollisionDetection41collisionTimeForMovingPointFixedRectangleERKNS_7Vector3ES3_S3_S3_S3_S3_RS1_S4_'/>
<use f='TrinityCore3.3.5/dep/g3dlite/source/CollisionDetection.cpp' l='1598' u='c' c='_ZN3G3D18CollisionDetection38collisionTimeForMovingSphereFixedPlaneERKNS_6SphereERKNS_7Vector3ERKNS_5PlaneERS4_SA_'/>
<use f='TrinityCore3.3.5/dep/g3dlite/source/CollisionDetection.cpp' l='1629' u='c' c='_ZN3G3D18CollisionDetection38collisionTimeForMovingSphereFixedPlaneERKNS_6SphereERKNS_7Vector3ERKNS_5PlaneERS4_SA_'/>
<doc f='TrinityCore3.3.5/dep/g3dlite/include/G3D/CollisionDetection.h' l='445'>/**
       Calculates time between the intersection of a moving point and a fixed
       plane.

       @note This is only a one sided collision test.   The side defined by
       the plane&apos;s surface normal is the only one tested.  For a two sided
       collision, call the function once for each side&apos;s surface normal.

       @param point        Moving point.
       @param velocity     Point&apos;s velocity.
       @param plane        Fixed plane.
       @param outLocation  Location of collision. [Post Condition]
                           (Infinite vector on no collision)
       @param outNormal    Plane&apos;s surface normal. [Post Condition]

       @return Time til collision.  If there is no collision then the return
               value will be inf().
     */</doc>
<use f='TrinityCore3.3.5/dep/g3dlite/source/Ray.cpp' l='188' u='c' c='_ZNK3G3D3Ray16intersectionTimeERKNS_5PlaneE'/>
<dec f='TrinityCore6.x/dep/g3dlite/include/G3D/CollisionDetection.h' l='463' type='static float G3D::CollisionDetection::collisionTimeForMovingPointFixedPlane(const G3D::Vector3 &amp; point, const G3D::Vector3 &amp; velocity, const class Plane &amp; plane, G3D::Vector3 &amp; outLocation, G3D::Vector3 &amp; outNormal = ignore)'/>
<def f='TrinityCore6.x/dep/g3dlite/source/CollisionDetection.cpp' l='847' type='static float G3D::CollisionDetection::collisionTimeForMovingPointFixedPlane(const G3D::Vector3 &amp; point, const G3D::Vector3 &amp; velocity, const G3D::Plane &amp; plane, G3D::Vector3 &amp; location, G3D::Vector3 &amp; outNormal = ignore)'/>
<use f='TrinityCore6.x/dep/g3dlite/source/CollisionDetection.cpp' l='1320' u='c' c='_ZN3G3D18CollisionDetection41collisionTimeForMovingPointFixedRectangleERKNS_7Vector3ES3_S3_S3_S3_S3_RS1_S4_'/>
<use f='TrinityCore6.x/dep/g3dlite/source/CollisionDetection.cpp' l='1598' u='c' c='_ZN3G3D18CollisionDetection38collisionTimeForMovingSphereFixedPlaneERKNS_6SphereERKNS_7Vector3ERKNS_5PlaneERS4_SA_'/>
<use f='TrinityCore6.x/dep/g3dlite/source/CollisionDetection.cpp' l='1629' u='c' c='_ZN3G3D18CollisionDetection38collisionTimeForMovingSphereFixedPlaneERKNS_6SphereERKNS_7Vector3ERKNS_5PlaneERS4_SA_'/>
<doc f='TrinityCore6.x/dep/g3dlite/include/G3D/CollisionDetection.h' l='445'>/**
       Calculates time between the intersection of a moving point and a fixed
       plane.

       @note This is only a one sided collision test.   The side defined by
       the plane&apos;s surface normal is the only one tested.  For a two sided
       collision, call the function once for each side&apos;s surface normal.

       @param point        Moving point.
       @param velocity     Point&apos;s velocity.
       @param plane        Fixed plane.
       @param outLocation  Location of collision. [Post Condition]
                           (Infinite vector on no collision)
       @param outNormal    Plane&apos;s surface normal. [Post Condition]

       @return Time til collision.  If there is no collision then the return
               value will be inf().
     */</doc>
<use f='TrinityCore6.x/dep/g3dlite/source/Ray.cpp' l='188' u='c' c='_ZNK3G3D3Ray16intersectionTimeERKNS_5PlaneE'/>
