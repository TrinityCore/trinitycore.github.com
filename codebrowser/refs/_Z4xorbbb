<def f='TrinityCore3.3.5/dep/recastnavigation/Recast/Source/RecastContour.cpp' l='480' type='bool xorb(bool x, bool y)'/>
<use f='TrinityCore3.3.5/dep/recastnavigation/Recast/Source/RecastContour.cpp' l='512' u='c' c='_ZL13intersectPropPKiS0_S0_S0_'/>
<use f='TrinityCore3.3.5/dep/recastnavigation/Recast/Source/RecastContour.cpp' l='512' u='c' c='_ZL13intersectPropPKiS0_S0_S0_'/>
<doc f='TrinityCore3.3.5/dep/recastnavigation/Recast/Source/RecastContour.cpp' l='476'>//	Exclusive or: true iff exactly one argument is true.
//	The arguments are negated to ensure that they are 0/1
//	values.  Then the bitwise Xor operator may apply.
//	(This idea is due to Michael Baldwin.)</doc>
<def f='TrinityCore3.3.5/dep/recastnavigation/Recast/Source/RecastMesh.cpp' l='176' type='bool xorb(bool x, bool y)'/>
<use f='TrinityCore3.3.5/dep/recastnavigation/Recast/Source/RecastMesh.cpp' l='208' u='c' c='_ZL13intersectPropPKiS0_S0_S0_'/>
<use f='TrinityCore3.3.5/dep/recastnavigation/Recast/Source/RecastMesh.cpp' l='208' u='c' c='_ZL13intersectPropPKiS0_S0_S0_'/>
<doc f='TrinityCore3.3.5/dep/recastnavigation/Recast/Source/RecastMesh.cpp' l='172'>//	Exclusive or: true iff exactly one argument is true.
//	The arguments are negated to ensure that they are 0/1
//	values.  Then the bitwise Xor operator may apply.
//	(This idea is due to Michael Baldwin.)</doc>
<def f='TrinityCore6.x/dep/recastnavigation/Recast/Source/RecastContour.cpp' l='480' type='bool xorb(bool x, bool y)'/>
<use f='TrinityCore6.x/dep/recastnavigation/Recast/Source/RecastContour.cpp' l='512' u='c' c='_ZL13intersectPropPKiS0_S0_S0_'/>
<use f='TrinityCore6.x/dep/recastnavigation/Recast/Source/RecastContour.cpp' l='512' u='c' c='_ZL13intersectPropPKiS0_S0_S0_'/>
<doc f='TrinityCore6.x/dep/recastnavigation/Recast/Source/RecastContour.cpp' l='476'>//	Exclusive or: true iff exactly one argument is true.
//	The arguments are negated to ensure that they are 0/1
//	values.  Then the bitwise Xor operator may apply.
//	(This idea is due to Michael Baldwin.)</doc>
<def f='TrinityCore6.x/dep/recastnavigation/Recast/Source/RecastMesh.cpp' l='176' type='bool xorb(bool x, bool y)'/>
<use f='TrinityCore6.x/dep/recastnavigation/Recast/Source/RecastMesh.cpp' l='208' u='c' c='_ZL13intersectPropPKiS0_S0_S0_'/>
<use f='TrinityCore6.x/dep/recastnavigation/Recast/Source/RecastMesh.cpp' l='208' u='c' c='_ZL13intersectPropPKiS0_S0_S0_'/>
<doc f='TrinityCore6.x/dep/recastnavigation/Recast/Source/RecastMesh.cpp' l='172'>//	Exclusive or: true iff exactly one argument is true.
//	The arguments are negated to ensure that they are 0/1
//	values.  Then the bitwise Xor operator may apply.
//	(This idea is due to Michael Baldwin.)</doc>
