<dec f='TrinityCore3.3.5/dep/g3dlite/include/G3D/Vector3.h' l='384' type='static G3D::Vector3 G3D::Vector3::cosHemiRandom(const G3D::Vector3 &amp; n, G3D::Random &amp; r = Random::common())'/>
<doc f='TrinityCore3.3.5/dep/g3dlite/include/G3D/Vector3.h' l='371'>/** \brief Random unit vector, distributed according to \f$\max(\cos \theta,0)\f$.

        That is, so that the probability of \f$\vec{V}\f$ is proportional 
        to \f$\max(\vec{v} \cdot \vec{n}, 0)\f$.  Useful in photon mapping for 
        Lambertian scattering.

        Distribution rendered by G3D::DirectionHistogram:
        \image html vector3-coshemirandom.png

        \param n Unit vector at the center of the distribution.

        @cite Henrik Wann Jensen, Realistic Image Synthesis using Photon Mapping eqn 2.24
    */</doc>
<def f='TrinityCore3.3.5/dep/g3dlite/source/Vector3.cpp' l='243' type='static G3D::Vector3 G3D::Vector3::cosHemiRandom(const G3D::Vector3 &amp; normal, G3D::Random &amp; r = Random::common())'/>
<dec f='TrinityCore6.x/dep/g3dlite/include/G3D/Vector3.h' l='384' type='static G3D::Vector3 G3D::Vector3::cosHemiRandom(const G3D::Vector3 &amp; n, G3D::Random &amp; r = Random::common())'/>
<doc f='TrinityCore6.x/dep/g3dlite/include/G3D/Vector3.h' l='371'>/** \brief Random unit vector, distributed according to \f$\max(\cos \theta,0)\f$.

        That is, so that the probability of \f$\vec{V}\f$ is proportional 
        to \f$\max(\vec{v} \cdot \vec{n}, 0)\f$.  Useful in photon mapping for 
        Lambertian scattering.

        Distribution rendered by G3D::DirectionHistogram:
        \image html vector3-coshemirandom.png

        \param n Unit vector at the center of the distribution.

        @cite Henrik Wann Jensen, Realistic Image Synthesis using Photon Mapping eqn 2.24
    */</doc>
<def f='TrinityCore6.x/dep/g3dlite/source/Vector3.cpp' l='243' type='static G3D::Vector3 G3D::Vector3::cosHemiRandom(const G3D::Vector3 &amp; normal, G3D::Random &amp; r = Random::common())'/>
