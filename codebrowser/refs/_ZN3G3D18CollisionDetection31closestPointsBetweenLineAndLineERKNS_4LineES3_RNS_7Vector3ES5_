<dec f='TrinityCore3.3.5/dep/g3dlite/include/G3D/CollisionDetection.h' l='300' type='static void G3D::CollisionDetection::closestPointsBetweenLineAndLine(const G3D::Line &amp; line1, const G3D::Line &amp; line2, G3D::Vector3 &amp; closest1, G3D::Vector3 &amp; closest2)'/>
<def f='TrinityCore3.3.5/dep/g3dlite/source/CollisionDetection.cpp' l='309' type='static void G3D::CollisionDetection::closestPointsBetweenLineAndLine(const G3D::Line &amp; line1, const G3D::Line &amp; line2, G3D::Vector3 &amp; closest1, G3D::Vector3 &amp; closest2)'/>
<use f='TrinityCore3.3.5/dep/g3dlite/source/CollisionDetection.cpp' l='537' u='c' c='_ZN3G3D18CollisionDetection35penetrationDepthForFixedBoxFixedBoxERKNS_3BoxES3_RNS_5ArrayINS_7Vector3ELm10EEES7_i'/>
<doc f='TrinityCore3.3.5/dep/g3dlite/include/G3D/CollisionDetection.h' l='281'>/**
      Calculates the closest points on two lines with each other.   If the
      lines are parallel then using the starting point, else calculate the
      closest point on each line to the other.

      @note This is very similiar to calculating the intersection of two lines.
      Logically then, the two points calculated would be identical if calculated
      with inifinite precision, but with the finite precision of floating point
      calculations, these values could (will) differ as the line slope approaches
      zero or inifinity.

      @cite variables and algorithm based on derivation at the following website:
              http://softsurfer.com/Archive/algorithm_0106/algorithm_0106.htm

      @param line1        Line 1.
      @param line2        Line 2.
      @param closest1    Closest point on line 1.
      @param closest2    Closest point on line 2.
     */</doc>
<dec f='TrinityCore6.x/dep/g3dlite/include/G3D/CollisionDetection.h' l='300' type='static void G3D::CollisionDetection::closestPointsBetweenLineAndLine(const G3D::Line &amp; line1, const G3D::Line &amp; line2, G3D::Vector3 &amp; closest1, G3D::Vector3 &amp; closest2)'/>
<def f='TrinityCore6.x/dep/g3dlite/source/CollisionDetection.cpp' l='309' type='static void G3D::CollisionDetection::closestPointsBetweenLineAndLine(const G3D::Line &amp; line1, const G3D::Line &amp; line2, G3D::Vector3 &amp; closest1, G3D::Vector3 &amp; closest2)'/>
<use f='TrinityCore6.x/dep/g3dlite/source/CollisionDetection.cpp' l='537' u='c' c='_ZN3G3D18CollisionDetection35penetrationDepthForFixedBoxFixedBoxERKNS_3BoxES3_RNS_5ArrayINS_7Vector3ELm10EEES7_i'/>
<doc f='TrinityCore6.x/dep/g3dlite/include/G3D/CollisionDetection.h' l='281'>/**
      Calculates the closest points on two lines with each other.   If the
      lines are parallel then using the starting point, else calculate the
      closest point on each line to the other.

      @note This is very similiar to calculating the intersection of two lines.
      Logically then, the two points calculated would be identical if calculated
      with inifinite precision, but with the finite precision of floating point
      calculations, these values could (will) differ as the line slope approaches
      zero or inifinity.

      @cite variables and algorithm based on derivation at the following website:
              http://softsurfer.com/Archive/algorithm_0106/algorithm_0106.htm

      @param line1        Line 1.
      @param line2        Line 2.
      @param closest1    Closest point on line 1.
      @param closest2    Closest point on line 2.
     */</doc>
