<dec f='TrinityCore3.3.5/dep/g3dlite/include/G3D/CoordinateFrame.h' l='307' type='void G3D::CoordinateFrame::moveTowards(const G3D::CoordinateFrame &amp; goal, float maxTranslation, float maxRotation)'/>
<doc f='TrinityCore3.3.5/dep/g3dlite/include/G3D/CoordinateFrame.h' l='295'>/**
    Transform this coordinate frame towards \a goal, but not past it, goverened by maximum
    rotation and translations.  This is a useful alternative to \a lerp, especially if the
    goal is expected to change every transformation step so that constant start and end positions will
    not be available.

    \param goal            Step from this towards goal
    \param maxTranslation  Meters 
    \param maxRotation     Radians

    \sa lerp
    */</doc>
<def f='TrinityCore3.3.5/dep/g3dlite/source/CoordinateFrame.cpp' l='411' type='void G3D::CoordinateFrame::moveTowards(const G3D::CoordinateFrame &amp; goal, float maxTranslation, float maxRotation)'/>
<dec f='TrinityCore6.x/dep/g3dlite/include/G3D/CoordinateFrame.h' l='307' type='void G3D::CoordinateFrame::moveTowards(const G3D::CoordinateFrame &amp; goal, float maxTranslation, float maxRotation)'/>
<doc f='TrinityCore6.x/dep/g3dlite/include/G3D/CoordinateFrame.h' l='295'>/**
    Transform this coordinate frame towards \a goal, but not past it, goverened by maximum
    rotation and translations.  This is a useful alternative to \a lerp, especially if the
    goal is expected to change every transformation step so that constant start and end positions will
    not be available.

    \param goal            Step from this towards goal
    \param maxTranslation  Meters 
    \param maxRotation     Radians

    \sa lerp
    */</doc>
<def f='TrinityCore6.x/dep/g3dlite/source/CoordinateFrame.cpp' l='411' type='void G3D::CoordinateFrame::moveTowards(const G3D::CoordinateFrame &amp; goal, float maxTranslation, float maxRotation)'/>
