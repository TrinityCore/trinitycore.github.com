<dec f='TrinityCore3.3.5/dep/recastnavigation/Detour/Include/DetourNavMeshQuery.h' l='195' type='dtStatus dtNavMeshQuery::findStraightPath(const float * startPos, const float * endPos, const dtPolyRef * path, const int pathSize, float * straightPath, unsigned char * straightPathFlags, dtPolyRef * straightPathRefs, int * straightPathCount, const int maxStraightPath, const int options = 0) const'/>
<def f='TrinityCore3.3.5/dep/recastnavigation/Detour/Source/DetourNavMeshQuery.cpp' l='1707' type='dtStatus dtNavMeshQuery::findStraightPath(const float * startPos, const float * endPos, const dtPolyRef * path, const int pathSize, float * straightPath, unsigned char * straightPathFlags, dtPolyRef * straightPathRefs, int * straightPathCount, const int maxStraightPath, const int options = 0) const'/>
<doc f='TrinityCore3.3.5/dep/recastnavigation/Detour/Source/DetourNavMeshQuery.cpp' l='1690'>/// @par
/// 
/// This method peforms what is often called &apos;string pulling&apos;.
///
/// The start position is clamped to the first polygon in the path, and the 
/// end position is clamped to the last. So the start and end positions should 
/// normally be within or very near the first and last polygons respectively.
///
/// The returned polygon references represent the reference id of the polygon 
/// that is entered at the associated path position. The reference id associated 
/// with the end point will always be zero.  This allows, for example, matching 
/// off-mesh link points to their representative polygons.
///
/// If the provided result buffers are too small for the entire result set, 
/// they will be filled as far as possible from the start toward the end 
/// position.
///</doc>
<doc f='TrinityCore3.3.5/dep/recastnavigation/Detour/Include/DetourNavMeshQuery.h' l='183'>/// Finds the straight path from the start to the end position within the polygon corridor.
	///  @param[in]		startPos			Path start position. [(x, y, z)]
	///  @param[in]		endPos				Path end position. [(x, y, z)]
	///  @param[in]		path				An array of polygon references that represent the path corridor.
	///  @param[in]		pathSize			The number of polygons in the @p path array.
	///  @param[out]	straightPath		Points describing the straight path. [(x, y, z) * @p straightPathCount].
	///  @param[out]	straightPathFlags	Flags describing each point. (See: #dtStraightPathFlags) [opt]
	///  @param[out]	straightPathRefs	The reference id of the polygon that is being entered at each point. [opt]
	///  @param[out]	straightPathCount	The number of points in the straight path.
	///  @param[in]		maxStraightPath		The maximum number of points the straight path arrays can hold.  [Limit: &gt; 0]
	///  @param[in]		options				Query options. (see: #dtStraightPathOptions)
	/// @returns The status flags for the query.</doc>
<use f='TrinityCore3.3.5/src/server/game/Movement/PathGenerator.cpp' l='506' u='c' c='_ZN13PathGenerator14BuildPointPathEPKfS1_'/>
<use f='TrinityCore3.3.5/src/server/game/Movement/PathGenerator.cpp' l='736' u='c' c='_ZN13PathGenerator14GetSteerTargetEPKfS1_fPKmjPfRhRm'/>
<dec f='TrinityCore6.x/dep/recastnavigation/Detour/Include/DetourNavMeshQuery.h' l='195' type='dtStatus dtNavMeshQuery::findStraightPath(const float * startPos, const float * endPos, const dtPolyRef * path, const int pathSize, float * straightPath, unsigned char * straightPathFlags, dtPolyRef * straightPathRefs, int * straightPathCount, const int maxStraightPath, const int options = 0) const'/>
<def f='TrinityCore6.x/dep/recastnavigation/Detour/Source/DetourNavMeshQuery.cpp' l='1707' type='dtStatus dtNavMeshQuery::findStraightPath(const float * startPos, const float * endPos, const dtPolyRef * path, const int pathSize, float * straightPath, unsigned char * straightPathFlags, dtPolyRef * straightPathRefs, int * straightPathCount, const int maxStraightPath, const int options = 0) const'/>
<doc f='TrinityCore6.x/dep/recastnavigation/Detour/Source/DetourNavMeshQuery.cpp' l='1690'>/// @par
/// 
/// This method peforms what is often called &apos;string pulling&apos;.
///
/// The start position is clamped to the first polygon in the path, and the 
/// end position is clamped to the last. So the start and end positions should 
/// normally be within or very near the first and last polygons respectively.
///
/// The returned polygon references represent the reference id of the polygon 
/// that is entered at the associated path position. The reference id associated 
/// with the end point will always be zero.  This allows, for example, matching 
/// off-mesh link points to their representative polygons.
///
/// If the provided result buffers are too small for the entire result set, 
/// they will be filled as far as possible from the start toward the end 
/// position.
///</doc>
<doc f='TrinityCore6.x/dep/recastnavigation/Detour/Include/DetourNavMeshQuery.h' l='183'>/// Finds the straight path from the start to the end position within the polygon corridor.
	///  @param[in]		startPos			Path start position. [(x, y, z)]
	///  @param[in]		endPos				Path end position. [(x, y, z)]
	///  @param[in]		path				An array of polygon references that represent the path corridor.
	///  @param[in]		pathSize			The number of polygons in the @p path array.
	///  @param[out]	straightPath		Points describing the straight path. [(x, y, z) * @p straightPathCount].
	///  @param[out]	straightPathFlags	Flags describing each point. (See: #dtStraightPathFlags) [opt]
	///  @param[out]	straightPathRefs	The reference id of the polygon that is being entered at each point. [opt]
	///  @param[out]	straightPathCount	The number of points in the straight path.
	///  @param[in]		maxStraightPath		The maximum number of points the straight path arrays can hold.  [Limit: &gt; 0]
	///  @param[in]		options				Query options. (see: #dtStraightPathOptions)
	/// @returns The status flags for the query.</doc>
<use f='TrinityCore6.x/src/server/game/Movement/PathGenerator.cpp' l='507' u='c' c='_ZN13PathGenerator14BuildPointPathEPKfS1_'/>
<use f='TrinityCore6.x/src/server/game/Movement/PathGenerator.cpp' l='737' u='c' c='_ZN13PathGenerator14GetSteerTargetEPKfS1_fPKmjPfRhRm'/>
