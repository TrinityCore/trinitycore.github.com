<def f='include/boost/regex/v4/regex_traits_defaults.hpp' l='241' type='charT boost::re_detail::global_lower(charT c)'/>
<def f='include/boost/regex/v4/regex_traits_defaults.hpp' l='271' type='char boost::re_detail::global_lower(char c)'/>
<def f='include/boost/regex/v4/regex_traits_defaults.hpp' l='274' type='wchar_t boost::re_detail::global_lower(wchar_t c)'/>
<doc f='include/boost/regex/v4/regex_traits_defaults.hpp' l='261'>//
// This sucks: declare template specialisations of global_lower/global_upper
// that just forward to the non-template implementation functions.  We do
// this because there is one compiler (Compaq Tru64 C++) that doesn&apos;t seem
// to differentiate between templates and non-template overloads....
// what&apos;s more, the primary template, plus all overloads have to be
// defined in the same translation unit (if one is inline they all must be)
// otherwise the &quot;local template instantiation&quot; compiler option can pick
// the wrong instantiation when linking:
//</doc>
