<dec f='TrinityCore3.3.5/dep/g3dlite/include/G3D/CollisionDetection.h' l='822' type='static float G3D::CollisionDetection::collisionTimeForMovingSphereFixedRectangle(const class Sphere &amp; sphere, const G3D::Vector3 &amp; velocity, const G3D::Vector3 &amp; v0, const G3D::Vector3 &amp; v1, const G3D::Vector3 &amp; v2, const G3D::Vector3 &amp; v3, G3D::Vector3 &amp; outLocation, G3D::Vector3 &amp; outNormal = ignore)'/>
<def f='TrinityCore3.3.5/dep/g3dlite/source/CollisionDetection.cpp' l='1750' type='static float G3D::CollisionDetection::collisionTimeForMovingSphereFixedRectangle(const G3D::Sphere &amp; sphere, const G3D::Vector3 &amp; velocity, const G3D::Vector3 &amp; v0, const G3D::Vector3 &amp; v1, const G3D::Vector3 &amp; v2, const G3D::Vector3 &amp; v3, G3D::Vector3 &amp; location, G3D::Vector3 &amp; outNormal = ignore)'/>
<use f='TrinityCore3.3.5/dep/g3dlite/source/CollisionDetection.cpp' l='1809' u='c' c='_ZN3G3D18CollisionDetection36collisionTimeForMovingSphereFixedBoxERKNS_6SphereERKNS_7Vector3ERKNS_3BoxERS4_SA_'/>
<use f='TrinityCore3.3.5/dep/g3dlite/source/CollisionDetection.cpp' l='1814' u='c' c='_ZN3G3D18CollisionDetection36collisionTimeForMovingSphereFixedBoxERKNS_6SphereERKNS_7Vector3ERKNS_3BoxERS4_SA_'/>
<doc f='TrinityCore3.3.5/dep/g3dlite/include/G3D/CollisionDetection.h' l='805'>/**
     Calculates time between the intersection of a moving sphere and a fixed
     rectangle defined by the points v0, v1, v2, &amp; v3.

     @param sphere        Moving sphere.
     @param velocity    Sphere&apos;s velocity.
     @param v0             Rectangle vertex 1.
     @param v1             Rectangle vertex 2.
     @param v2             Rectangle vertex 3
     @param v3             Rectangle vertex 4.
     @param outLocation    Location of collision -- not center position of sphere
                         at the collision time. [Post Condition]
     @param outNormal    Box&apos;s surface normal to collision [Post Condition]

     @return Time til collision.  If there is no collision then the return
             value will be inf().
     */</doc>
<dec f='TrinityCore6.x/dep/g3dlite/include/G3D/CollisionDetection.h' l='822' type='static float G3D::CollisionDetection::collisionTimeForMovingSphereFixedRectangle(const class Sphere &amp; sphere, const G3D::Vector3 &amp; velocity, const G3D::Vector3 &amp; v0, const G3D::Vector3 &amp; v1, const G3D::Vector3 &amp; v2, const G3D::Vector3 &amp; v3, G3D::Vector3 &amp; outLocation, G3D::Vector3 &amp; outNormal = ignore)'/>
<def f='TrinityCore6.x/dep/g3dlite/source/CollisionDetection.cpp' l='1750' type='static float G3D::CollisionDetection::collisionTimeForMovingSphereFixedRectangle(const G3D::Sphere &amp; sphere, const G3D::Vector3 &amp; velocity, const G3D::Vector3 &amp; v0, const G3D::Vector3 &amp; v1, const G3D::Vector3 &amp; v2, const G3D::Vector3 &amp; v3, G3D::Vector3 &amp; location, G3D::Vector3 &amp; outNormal = ignore)'/>
<use f='TrinityCore6.x/dep/g3dlite/source/CollisionDetection.cpp' l='1809' u='c' c='_ZN3G3D18CollisionDetection36collisionTimeForMovingSphereFixedBoxERKNS_6SphereERKNS_7Vector3ERKNS_3BoxERS4_SA_'/>
<use f='TrinityCore6.x/dep/g3dlite/source/CollisionDetection.cpp' l='1814' u='c' c='_ZN3G3D18CollisionDetection36collisionTimeForMovingSphereFixedBoxERKNS_6SphereERKNS_7Vector3ERKNS_3BoxERS4_SA_'/>
<doc f='TrinityCore6.x/dep/g3dlite/include/G3D/CollisionDetection.h' l='805'>/**
     Calculates time between the intersection of a moving sphere and a fixed
     rectangle defined by the points v0, v1, v2, &amp; v3.

     @param sphere        Moving sphere.
     @param velocity    Sphere&apos;s velocity.
     @param v0             Rectangle vertex 1.
     @param v1             Rectangle vertex 2.
     @param v2             Rectangle vertex 3
     @param v3             Rectangle vertex 4.
     @param outLocation    Location of collision -- not center position of sphere
                         at the collision time. [Post Condition]
     @param outNormal    Box&apos;s surface normal to collision [Post Condition]

     @return Time til collision.  If there is no collision then the return
             value will be inf().
     */</doc>
