<dec f='TrinityCore3.3.5/dep/g3dlite/include/G3D/TextInput.h' l='364' type='bool'/>
<offset>224</offset>
<doc f='TrinityCore3.3.5/dep/g3dlite/include/G3D/TextInput.h' l='333'>/** 
          Parse &quot;-1.#IND00&quot; as the floating point number returned by
          G3D::nan(), &quot;-1.#INF00&quot; as - G3D::inf(), and &quot;1.#INF00&quot; as G3D::inf().  

          Note that the C99 standard specifies that a variety of formats
          like &quot;nan&quot; are to be used; these are supported by 
          G3D::TextInput::Settings::simpleFloatSpecials.

          An alternative to specifying msvcFloatSpecials is to read numbers as:
          \htmlonly
          &lt;pre&gt;
            Token x = t.read();
            Token y = t.peek();
            if ((x.string() == &quot;-1.&quot;) &amp;&amp; 
                (y.string() == &quot;#INF00&quot;) &amp;&amp; 
                (y.character() == x.character() + 3) &amp;&amp;
                (y.line() == x.line()) {
                t.read();
                return nan();
            }
            // ... similar cases for inf
          &lt;/pre&gt;
          \endhtmlonly

          If the single-comment character was #, the floating point
          special format overrides the comment and will be parsed
          instead.

          If signedNumbers is false msvcFloatSpecials will not be parsed.

          Default is true. */</doc>
<use f='TrinityCore3.3.5/dep/g3dlite/source/Any.cpp' l='868' u='w' c='_ZN3G3DL22getDeserializeSettingsERNS_9TextInput8SettingsE'/>
<use f='TrinityCore3.3.5/dep/g3dlite/source/TextInput.cpp' l='89' u='w' c='_ZN3G3D9TextInput8SettingsC1Ev'/>
<use f='TrinityCore3.3.5/dep/g3dlite/source/TextInput.cpp' l='710' u='r' c='_ZN3G3D9TextInput9nextTokenERNS_5TokenE'/>
<dec f='TrinityCore6.x/dep/g3dlite/include/G3D/TextInput.h' l='364' type='bool'/>
<offset>224</offset>
<doc f='TrinityCore6.x/dep/g3dlite/include/G3D/TextInput.h' l='333'>/** 
          Parse &quot;-1.#IND00&quot; as the floating point number returned by
          G3D::nan(), &quot;-1.#INF00&quot; as - G3D::inf(), and &quot;1.#INF00&quot; as G3D::inf().  

          Note that the C99 standard specifies that a variety of formats
          like &quot;nan&quot; are to be used; these are supported by 
          G3D::TextInput::Settings::simpleFloatSpecials.

          An alternative to specifying msvcFloatSpecials is to read numbers as:
          \htmlonly
          &lt;pre&gt;
            Token x = t.read();
            Token y = t.peek();
            if ((x.string() == &quot;-1.&quot;) &amp;&amp; 
                (y.string() == &quot;#INF00&quot;) &amp;&amp; 
                (y.character() == x.character() + 3) &amp;&amp;
                (y.line() == x.line()) {
                t.read();
                return nan();
            }
            // ... similar cases for inf
          &lt;/pre&gt;
          \endhtmlonly

          If the single-comment character was #, the floating point
          special format overrides the comment and will be parsed
          instead.

          If signedNumbers is false msvcFloatSpecials will not be parsed.

          Default is true. */</doc>
<use f='TrinityCore6.x/dep/g3dlite/source/Any.cpp' l='868' u='w' c='_ZN3G3DL22getDeserializeSettingsERNS_9TextInput8SettingsE'/>
<use f='TrinityCore6.x/dep/g3dlite/source/TextInput.cpp' l='89' u='w' c='_ZN3G3D9TextInput8SettingsC1Ev'/>
<use f='TrinityCore6.x/dep/g3dlite/source/TextInput.cpp' l='710' u='r' c='_ZN3G3D9TextInput9nextTokenERNS_5TokenE'/>
