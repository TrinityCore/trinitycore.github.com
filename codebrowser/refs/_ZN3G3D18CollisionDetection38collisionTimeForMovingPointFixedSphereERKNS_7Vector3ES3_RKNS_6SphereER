<dec f='TrinityCore3.3.5/dep/g3dlite/include/G3D/CollisionDetection.h' l='682' type='static float G3D::CollisionDetection::collisionTimeForMovingPointFixedSphere(const G3D::Vector3 &amp; point, const G3D::Vector3 &amp; velocity, const class Sphere &amp; sphere, G3D::Vector3 &amp; outLocation, G3D::Vector3 &amp; outNormal = ignore, bool solid = false)'/>
<def f='TrinityCore3.3.5/dep/g3dlite/source/CollisionDetection.cpp' l='977' type='static float G3D::CollisionDetection::collisionTimeForMovingPointFixedSphere(const G3D::Vector3 &amp; point, const G3D::Vector3 &amp; velocity, const G3D::Sphere &amp; sphere, G3D::Vector3 &amp; location, G3D::Vector3 &amp; outNormal = ignore, bool solid = false)'/>
<use f='TrinityCore3.3.5/dep/g3dlite/source/CollisionDetection.cpp' l='1048' u='c' c='_ZN3G3D18CollisionDetection39collisionTimeForMovingSphereFixedSphereERKNS_6SphereERKNS_7Vector3ES3_RS4_S7_'/>
<use f='TrinityCore3.3.5/dep/g3dlite/source/CollisionDetection.cpp' l='1696' u='c' c='_ZN3G3D18CollisionDetection41collisionTimeForMovingSphereFixedTriangleERKNS_6SphereERKNS_7Vector3ERKNS_8TriangleERS4_Pf'/>
<use f='TrinityCore3.3.5/dep/g3dlite/source/CollisionDetection.cpp' l='1781' u='c' c='_ZN3G3D18CollisionDetection42collisionTimeForMovingSphereFixedRectangleERKNS_6SphereERKNS_7Vector3ES6_S6_S6_S6_RS4_S7_'/>
<use f='TrinityCore3.3.5/dep/g3dlite/source/CollisionDetection.cpp' l='2240' u='c' c='_ZN3G3D18CollisionDetection36movingSpherePassesThroughFixedSphereERKNS_6SphereERKNS_7Vector3ES3_d'/>
<doc f='TrinityCore3.3.5/dep/g3dlite/include/G3D/CollisionDetection.h' l='665'>/**
     Calculates time between the intersection of a moving point and a fixed
     sphere.

     @note When ray is starts inside the rectangle, the exiting intersection
     is detected.

     @param point        Moving point.
     @param velocity    Point&apos;s velocity.
     @param sphere        Fixed Sphere.
     @param outLocation    Location of collision. [Post Condition]
     @param outNormal    Sphere&apos;s surface normal to collision [Post Condition]
     \param solid If true, rays inside the sphere immediately intersect (good for collision detection).  If false, they hit the opposite side of the sphere (good for ray tracing).

     @return Time until collision.  If there is no collision then the return
             value will be inf().
     */</doc>
<use f='TrinityCore3.3.5/dep/g3dlite/source/Ray.cpp' l='181' u='c' c='_ZNK3G3D3Ray16intersectionTimeERKNS_6SphereEb'/>
<dec f='TrinityCore6.x/dep/g3dlite/include/G3D/CollisionDetection.h' l='682' type='static float G3D::CollisionDetection::collisionTimeForMovingPointFixedSphere(const G3D::Vector3 &amp; point, const G3D::Vector3 &amp; velocity, const class Sphere &amp; sphere, G3D::Vector3 &amp; outLocation, G3D::Vector3 &amp; outNormal = ignore, bool solid = false)'/>
<def f='TrinityCore6.x/dep/g3dlite/source/CollisionDetection.cpp' l='977' type='static float G3D::CollisionDetection::collisionTimeForMovingPointFixedSphere(const G3D::Vector3 &amp; point, const G3D::Vector3 &amp; velocity, const G3D::Sphere &amp; sphere, G3D::Vector3 &amp; location, G3D::Vector3 &amp; outNormal = ignore, bool solid = false)'/>
<use f='TrinityCore6.x/dep/g3dlite/source/CollisionDetection.cpp' l='1048' u='c' c='_ZN3G3D18CollisionDetection39collisionTimeForMovingSphereFixedSphereERKNS_6SphereERKNS_7Vector3ES3_RS4_S7_'/>
<use f='TrinityCore6.x/dep/g3dlite/source/CollisionDetection.cpp' l='1696' u='c' c='_ZN3G3D18CollisionDetection41collisionTimeForMovingSphereFixedTriangleERKNS_6SphereERKNS_7Vector3ERKNS_8TriangleERS4_Pf'/>
<use f='TrinityCore6.x/dep/g3dlite/source/CollisionDetection.cpp' l='1781' u='c' c='_ZN3G3D18CollisionDetection42collisionTimeForMovingSphereFixedRectangleERKNS_6SphereERKNS_7Vector3ES6_S6_S6_S6_RS4_S7_'/>
<use f='TrinityCore6.x/dep/g3dlite/source/CollisionDetection.cpp' l='2240' u='c' c='_ZN3G3D18CollisionDetection36movingSpherePassesThroughFixedSphereERKNS_6SphereERKNS_7Vector3ES3_d'/>
<doc f='TrinityCore6.x/dep/g3dlite/include/G3D/CollisionDetection.h' l='665'>/**
     Calculates time between the intersection of a moving point and a fixed
     sphere.

     @note When ray is starts inside the rectangle, the exiting intersection
     is detected.

     @param point        Moving point.
     @param velocity    Point&apos;s velocity.
     @param sphere        Fixed Sphere.
     @param outLocation    Location of collision. [Post Condition]
     @param outNormal    Sphere&apos;s surface normal to collision [Post Condition]
     \param solid If true, rays inside the sphere immediately intersect (good for collision detection).  If false, they hit the opposite side of the sphere (good for ray tracing).

     @return Time until collision.  If there is no collision then the return
             value will be inf().
     */</doc>
<use f='TrinityCore6.x/dep/g3dlite/source/Ray.cpp' l='181' u='c' c='_ZNK3G3D3Ray16intersectionTimeERKNS_6SphereEb'/>
