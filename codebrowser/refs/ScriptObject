<def f='TrinityCore3.3.5/src/server/game/Scripting/ScriptMgr.h' l='150'/>
<ovr f='TrinityCore3.3.5/src/server/game/Scripting/ScriptMgr.h' l='189' c='SpellScriptLoader'/>
<ovr f='TrinityCore3.3.5/src/server/game/Scripting/ScriptMgr.h' l='204' c='ServerScript'/>
<ovr f='TrinityCore3.3.5/src/server/game/Scripting/ScriptMgr.h' l='238' c='WorldScript'/>
<ovr f='TrinityCore3.3.5/src/server/game/Scripting/ScriptMgr.h' l='271' c='FormulaScript'/>
<ovr f='TrinityCore3.3.5/src/server/game/Scripting/ScriptMgr.h' l='338' c='WorldMapScript'/>
<ovr f='TrinityCore3.3.5/src/server/game/Scripting/ScriptMgr.h' l='345' c='InstanceMapScript'/>
<ovr f='TrinityCore3.3.5/src/server/game/Scripting/ScriptMgr.h' l='357' c='BattlegroundMapScript'/>
<ovr f='TrinityCore3.3.5/src/server/game/Scripting/ScriptMgr.h' l='364' c='ItemScript'/>
<ovr f='TrinityCore3.3.5/src/server/game/Scripting/ScriptMgr.h' l='388' c='UnitScript'/>
<ovr f='TrinityCore3.3.5/src/server/game/Scripting/ScriptMgr.h' l='447' c='GameObjectScript'/>
<ovr f='TrinityCore3.3.5/src/server/game/Scripting/ScriptMgr.h' l='492' c='AreaTriggerScript'/>
<ovr f='TrinityCore3.3.5/src/server/game/Scripting/ScriptMgr.h' l='504' c='BattlegroundScript'/>
<ovr f='TrinityCore3.3.5/src/server/game/Scripting/ScriptMgr.h' l='516' c='OutdoorPvPScript'/>
<ovr f='TrinityCore3.3.5/src/server/game/Scripting/ScriptMgr.h' l='528' c='CommandScript'/>
<ovr f='TrinityCore3.3.5/src/server/game/Scripting/ScriptMgr.h' l='540' c='WeatherScript'/>
<ovr f='TrinityCore3.3.5/src/server/game/Scripting/ScriptMgr.h' l='552' c='AuctionHouseScript'/>
<ovr f='TrinityCore3.3.5/src/server/game/Scripting/ScriptMgr.h' l='573' c='ConditionScript'/>
<ovr f='TrinityCore3.3.5/src/server/game/Scripting/ScriptMgr.h' l='585' c='VehicleScript'/>
<ovr f='TrinityCore3.3.5/src/server/game/Scripting/ScriptMgr.h' l='612' c='DynamicObjectScript'/>
<ovr f='TrinityCore3.3.5/src/server/game/Scripting/ScriptMgr.h' l='619' c='TransportScript'/>
<ovr f='TrinityCore3.3.5/src/server/game/Scripting/ScriptMgr.h' l='640' c='AchievementCriteriaScript'/>
<ovr f='TrinityCore3.3.5/src/server/game/Scripting/ScriptMgr.h' l='749' c='AccountScript'/>
<ovr f='TrinityCore3.3.5/src/server/game/Scripting/ScriptMgr.h' l='776' c='GuildScript'/>
<ovr f='TrinityCore3.3.5/src/server/game/Scripting/ScriptMgr.h' l='817' c='GroupScript'/>
<size>16</size>
<doc f='TrinityCore3.3.5/src/server/game/Scripting/ScriptMgr.h' l='84'>/*
    Standard procedure when adding new script type classes:

    First of all, define the actual class, and have it inherit from ScriptObject, like so:

    class MyScriptType : public ScriptObject
    {
        uint32 _someId;

        private:

            void RegisterSelf();

        protected:

            MyScriptType(const char* name, uint32 someId)
                : ScriptObject(name), _someId(someId)
            {
                ScriptRegistry&lt;MyScriptType&gt;::AddScript(this);
            }

        public:

            // If a virtual function in your script type class is not necessarily
            // required to be overridden, just declare it virtual with an empty
            // body. If, on the other hand, it&apos;s logical only to override it (i.e.
            // if it&apos;s the only method in the class), make it pure virtual, by adding
            // = 0 to it.
            virtual void OnSomeEvent(uint32 someArg1, std::string&amp; someArg2) { }

            // This is a pure virtual function:
            virtual void OnAnotherEvent(uint32 someArg) = 0;
    }

    Next, you need to add a specialization for ScriptRegistry. Put this in the bottom of
    ScriptMgr.cpp:

    template class ScriptRegistry&lt;MyScriptType&gt;;

    Now, add a cleanup routine in ScriptMgr::~ScriptMgr:

    SCR_CLEAR(MyScriptType);

    Now your script type is good to go with the script system. What you need to do now
    is add functions to ScriptMgr that can be called from the core to actually trigger
    certain events. For example, in ScriptMgr.h:

    void OnSomeEvent(uint32 someArg1, std::string&amp; someArg2);
    void OnAnotherEvent(uint32 someArg);

    In ScriptMgr.cpp:

    void ScriptMgr::OnSomeEvent(uint32 someArg1, std::string&amp; someArg2)
    {
        FOREACH_SCRIPT(MyScriptType)-&gt;OnSomeEvent(someArg1, someArg2);
    }

    void ScriptMgr::OnAnotherEvent(uint32 someArg)
    {
        FOREACH_SCRIPT(MyScriptType)-&gt;OnAnotherEvent(someArg1, someArg2);
    }

    Now you simply call these two functions from anywhere in the core to trigger the
    event on all registered scripts of that type.
*/</doc>
<def f='TrinityCore6.x/src/server/game/Scripting/ScriptMgr.h' l='149'/>
<ovr f='TrinityCore6.x/src/server/game/Scripting/ScriptMgr.h' l='188' c='SpellScriptLoader'/>
<ovr f='TrinityCore6.x/src/server/game/Scripting/ScriptMgr.h' l='203' c='ServerScript'/>
<ovr f='TrinityCore6.x/src/server/game/Scripting/ScriptMgr.h' l='237' c='WorldScript'/>
<ovr f='TrinityCore6.x/src/server/game/Scripting/ScriptMgr.h' l='270' c='FormulaScript'/>
<ovr f='TrinityCore6.x/src/server/game/Scripting/ScriptMgr.h' l='337' c='WorldMapScript'/>
<ovr f='TrinityCore6.x/src/server/game/Scripting/ScriptMgr.h' l='344' c='InstanceMapScript'/>
<ovr f='TrinityCore6.x/src/server/game/Scripting/ScriptMgr.h' l='356' c='BattlegroundMapScript'/>
<ovr f='TrinityCore6.x/src/server/game/Scripting/ScriptMgr.h' l='363' c='ItemScript'/>
<ovr f='TrinityCore6.x/src/server/game/Scripting/ScriptMgr.h' l='387' c='UnitScript'/>
<ovr f='TrinityCore6.x/src/server/game/Scripting/ScriptMgr.h' l='446' c='GameObjectScript'/>
<ovr f='TrinityCore6.x/src/server/game/Scripting/ScriptMgr.h' l='491' c='AreaTriggerScript'/>
<ovr f='TrinityCore6.x/src/server/game/Scripting/ScriptMgr.h' l='503' c='BattlegroundScript'/>
<ovr f='TrinityCore6.x/src/server/game/Scripting/ScriptMgr.h' l='515' c='OutdoorPvPScript'/>
<ovr f='TrinityCore6.x/src/server/game/Scripting/ScriptMgr.h' l='527' c='CommandScript'/>
<ovr f='TrinityCore6.x/src/server/game/Scripting/ScriptMgr.h' l='539' c='WeatherScript'/>
<ovr f='TrinityCore6.x/src/server/game/Scripting/ScriptMgr.h' l='551' c='AuctionHouseScript'/>
<ovr f='TrinityCore6.x/src/server/game/Scripting/ScriptMgr.h' l='572' c='ConditionScript'/>
<ovr f='TrinityCore6.x/src/server/game/Scripting/ScriptMgr.h' l='584' c='VehicleScript'/>
<ovr f='TrinityCore6.x/src/server/game/Scripting/ScriptMgr.h' l='611' c='DynamicObjectScript'/>
<ovr f='TrinityCore6.x/src/server/game/Scripting/ScriptMgr.h' l='618' c='TransportScript'/>
<ovr f='TrinityCore6.x/src/server/game/Scripting/ScriptMgr.h' l='639' c='AchievementCriteriaScript'/>
<ovr f='TrinityCore6.x/src/server/game/Scripting/ScriptMgr.h' l='748' c='AccountScript'/>
<ovr f='TrinityCore6.x/src/server/game/Scripting/ScriptMgr.h' l='775' c='GuildScript'/>
<ovr f='TrinityCore6.x/src/server/game/Scripting/ScriptMgr.h' l='816' c='GroupScript'/>
<size>16</size>
<doc f='TrinityCore6.x/src/server/game/Scripting/ScriptMgr.h' l='83'>/*
    Standard procedure when adding new script type classes:

    First of all, define the actual class, and have it inherit from ScriptObject, like so:

    class MyScriptType : public ScriptObject
    {
        uint32 _someId;

        private:

            void RegisterSelf();

        protected:

            MyScriptType(const char* name, uint32 someId)
                : ScriptObject(name), _someId(someId)
            {
                ScriptRegistry&lt;MyScriptType&gt;::AddScript(this);
            }

        public:

            // If a virtual function in your script type class is not necessarily
            // required to be overridden, just declare it virtual with an empty
            // body. If, on the other hand, it&apos;s logical only to override it (i.e.
            // if it&apos;s the only method in the class), make it pure virtual, by adding
            // = 0 to it.
            virtual void OnSomeEvent(uint32 someArg1, std::string&amp; someArg2) { }

            // This is a pure virtual function:
            virtual void OnAnotherEvent(uint32 someArg) = 0;
    }

    Next, you need to add a specialization for ScriptRegistry. Put this in the bottom of
    ScriptMgr.cpp:

    template class ScriptRegistry&lt;MyScriptType&gt;;

    Now, add a cleanup routine in ScriptMgr::~ScriptMgr:

    SCR_CLEAR(MyScriptType);

    Now your script type is good to go with the script system. What you need to do now
    is add functions to ScriptMgr that can be called from the core to actually trigger
    certain events. For example, in ScriptMgr.h:

    void OnSomeEvent(uint32 someArg1, std::string&amp; someArg2);
    void OnAnotherEvent(uint32 someArg);

    In ScriptMgr.cpp:

    void ScriptMgr::OnSomeEvent(uint32 someArg1, std::string&amp; someArg2)
    {
        FOREACH_SCRIPT(MyScriptType)-&gt;OnSomeEvent(someArg1, someArg2);
    }

    void ScriptMgr::OnAnotherEvent(uint32 someArg)
    {
        FOREACH_SCRIPT(MyScriptType)-&gt;OnAnotherEvent(someArg1, someArg2);
    }

    Now you simply call these two functions from anywhere in the core to trigger the
    event on all registered scripts of that type.
*/</doc>
