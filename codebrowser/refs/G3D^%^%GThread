<inh f='TrinityCore3.3.5/dep/g3dlite/include/G3D/ReferenceCount.h' l='24' c='G3D::ReferenceCountedObject'/>
<def f='TrinityCore3.3.5/dep/g3dlite/include/G3D/GThread.h' l='42'/>
<ovr f='TrinityCore3.3.5/dep/g3dlite/include/G3D/GThread.h' l='195' c='G3D::_internalGThreadWorker'/>
<ovr f='TrinityCore3.3.5/dep/g3dlite/source/GThread.cpp' l='19' c='G3D::_internal::BasicThread'/>
<size>48</size>
<doc f='TrinityCore3.3.5/dep/g3dlite/include/G3D/GThread.h' l='31'>/**
 Platform independent thread implementation.  You can either subclass and 
 override GThread::threadMain or call the create method with a method.

 Beware of reference counting and threads.  If circular references exist between
 GThread subclasses then neither class will ever be deallocated.  Also, 
 dropping all pointers (and causing deallocation) of a GThread does NOT 
 stop the underlying process.

 \sa G3D::GMutex, G3D::Spinlock, G3D::AtomicInt32, G3D::ThreadSet
*/</doc>
<inh f='TrinityCore6.x/dep/g3dlite/include/G3D/ReferenceCount.h' l='24' c='G3D::ReferenceCountedObject'/>
<def f='TrinityCore6.x/dep/g3dlite/include/G3D/GThread.h' l='42'/>
<ovr f='TrinityCore6.x/dep/g3dlite/include/G3D/GThread.h' l='195' c='G3D::_internalGThreadWorker'/>
<ovr f='TrinityCore6.x/dep/g3dlite/source/GThread.cpp' l='19' c='G3D::_internal::BasicThread'/>
<size>48</size>
<doc f='TrinityCore6.x/dep/g3dlite/include/G3D/GThread.h' l='31'>/**
 Platform independent thread implementation.  You can either subclass and 
 override GThread::threadMain or call the create method with a method.

 Beware of reference counting and threads.  If circular references exist between
 GThread subclasses then neither class will ever be deallocated.  Also, 
 dropping all pointers (and causing deallocation) of a GThread does NOT 
 stop the underlying process.

 \sa G3D::GMutex, G3D::Spinlock, G3D::AtomicInt32, G3D::ThreadSet
*/</doc>
