<dec f='include/x86_64-linux-gnu/sys/epoll.h' l='113' type='int epoll_ctl(int __epfd, int __op, int __fd, struct epoll_event * __event)'/>
<use f='include/boost/asio/detail/impl/epoll_reactor.ipp' l='51' u='c' c='_ZN5boost4asio6detail13epoll_reactorC1ERNS0_10io_serviceE'/>
<use f='include/boost/asio/detail/impl/epoll_reactor.ipp' l='59' u='c' c='_ZN5boost4asio6detail13epoll_reactorC1ERNS0_10io_serviceE'/>
<use f='include/boost/asio/detail/impl/epoll_reactor.ipp' l='112' u='c' c='_ZN5boost4asio6detail13epoll_reactor12fork_serviceENS0_10io_service10fork_eventE'/>
<use f='include/boost/asio/detail/impl/epoll_reactor.ipp' l='120' u='c' c='_ZN5boost4asio6detail13epoll_reactor12fork_serviceENS0_10io_service10fork_eventE'/>
<use f='include/boost/asio/detail/impl/epoll_reactor.ipp' l='132' u='c' c='_ZN5boost4asio6detail13epoll_reactor12fork_serviceENS0_10io_service10fork_eventE'/>
<use f='include/boost/asio/detail/impl/epoll_reactor.ipp' l='165' u='c' c='_ZN5boost4asio6detail13epoll_reactor19register_descriptorEiRPNS2_16descriptor_stateE'/>
<use f='include/boost/asio/detail/impl/epoll_reactor.ipp' l='191' u='c' c='_ZN5boost4asio6detail13epoll_reactor28register_internal_descriptorEiiRPNS2_16descriptor_stateEPNS1_10reactor_opE'/>
<use f='include/boost/asio/detail/impl/epoll_reactor.ipp' l='245' u='c' c='_ZN5boost4asio6detail13epoll_reactor8start_opEiiRPNS2_16descriptor_stateEPNS1_10reactor_opEbb'/>
<use f='include/boost/asio/detail/impl/epoll_reactor.ipp' l='269' u='c' c='_ZN5boost4asio6detail13epoll_reactor8start_opEiiRPNS2_16descriptor_stateEPNS1_10reactor_opEbb'/>
<use f='include/boost/asio/detail/impl/epoll_reactor.ipp' l='319' u='c' c='_ZN5boost4asio6detail13epoll_reactor21deregister_descriptorEiRPNS2_16descriptor_stateEb'/>
<use f='include/boost/asio/detail/impl/epoll_reactor.ipp' l='356' u='c' c='_ZN5boost4asio6detail13epoll_reactor30deregister_internal_descriptorEiRPNS2_16descriptor_stateE'/>
<use f='include/boost/asio/detail/impl/epoll_reactor.ipp' l='457' u='c' c='_ZN5boost4asio6detail13epoll_reactor9interruptEv'/>
<doc f='include/x86_64-linux-gnu/sys/epoll.h' l='107'>/* Manipulate an epoll instance &quot;epfd&quot;. Returns 0 in case of success,
   -1 in case of error ( the &quot;errno&quot; variable will contain the
   specific error code ) The &quot;op&quot; parameter is one of the EPOLL_CTL_*
   constants defined above. The &quot;fd&quot; parameter is the target of the
   operation. The &quot;event&quot; parameter describes which events the caller
   is interested in and any associated user data.  */</doc>
