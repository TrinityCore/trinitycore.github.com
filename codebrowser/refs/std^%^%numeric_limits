<inh f='include/c++/4.9/limits' l='191' c='std::__numeric_limits_base'/>
<def f='include/c++/4.9/limits' l='304'/>
<def f='include/c++/4.9/limits' l='354'/>
<def f='include/c++/4.9/limits' l='358'/>
<def f='include/c++/4.9/limits' l='362'/>
<def f='include/c++/4.9/limits' l='371'/>
<def f='include/c++/4.9/limits' l='440'/>
<def f='include/c++/4.9/limits' l='507'/>
<def f='include/c++/4.9/limits' l='577'/>
<def f='include/c++/4.9/limits' l='650'/>
<def f='include/c++/4.9/limits' l='719'/>
<def f='include/c++/4.9/limits' l='780'/>
<def f='include/c++/4.9/limits' l='842'/>
<def f='include/c++/4.9/limits' l='909'/>
<def f='include/c++/4.9/limits' l='982'/>
<def f='include/c++/4.9/limits' l='1049'/>
<def f='include/c++/4.9/limits' l='1121'/>
<def f='include/c++/4.9/limits' l='1188'/>
<def f='include/c++/4.9/limits' l='1261'/>
<def f='include/c++/4.9/limits' l='1331'/>
<def f='include/c++/4.9/limits' l='1553'/>
<def f='include/c++/4.9/limits' l='1628'/>
<def f='include/c++/4.9/limits' l='1703'/>
<ovr f='TrinityCore3.3.5/dep/cppformat/format.h' l='274' c='std::numeric_limits'/>
<inh f='include/c++/4.9/limits' l='982' c='std::numeric_limits'/>
<def f='TrinityCore3.3.5/dep/cppformat/format.h' l='274'/>
<size>1</size>
<doc f='TrinityCore3.3.5/dep/cppformat/format.h' l='269'>// Standard permits specialization of std::numeric_limits. This specialization
// is used to resolve ambiguity between isinf and std::isinf in glibc:
// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=48891
// and the same for isnan and signbit.</doc>
<doc f='include/c++/4.9/limits' l='366'>// Now there follow 16 explicit specializations.  Yes, 16.  Make sure
  // you get the count right. (18 in c++0x mode)

  /// numeric_limits&lt;bool&gt; specialization.</doc>
<doc f='include/c++/4.9/limits' l='438'>/// numeric_limits&lt;char&gt; specialization.</doc>
<doc f='include/c++/4.9/limits' l='505'>/// numeric_limits&lt;signed char&gt; specialization.</doc>
<doc f='include/c++/4.9/limits' l='575'>/// numeric_limits&lt;unsigned char&gt; specialization.</doc>
<doc f='include/c++/4.9/limits' l='648'>/// numeric_limits&lt;wchar_t&gt; specialization.</doc>
<doc f='include/c++/4.9/limits' l='717'>/// numeric_limits&lt;char16_t&gt; specialization.</doc>
<doc f='include/c++/4.9/limits' l='778'>/// numeric_limits&lt;char32_t&gt; specialization.</doc>
<doc f='include/c++/4.9/limits' l='840'>/// numeric_limits&lt;short&gt; specialization.</doc>
<doc f='include/c++/4.9/limits' l='907'>/// numeric_limits&lt;unsigned short&gt; specialization.</doc>
<doc f='include/c++/4.9/limits' l='980'>/// numeric_limits&lt;int&gt; specialization.</doc>
<doc f='include/c++/4.9/limits' l='1047'>/// numeric_limits&lt;unsigned int&gt; specialization.</doc>
<doc f='include/c++/4.9/limits' l='1119'>/// numeric_limits&lt;long&gt; specialization.</doc>
<doc f='include/c++/4.9/limits' l='1186'>/// numeric_limits&lt;unsigned long&gt; specialization.</doc>
<doc f='include/c++/4.9/limits' l='1259'>/// numeric_limits&lt;long long&gt; specialization.</doc>
<doc f='include/c++/4.9/limits' l='1329'>/// numeric_limits&lt;unsigned long long&gt; specialization.</doc>
<doc f='include/c++/4.9/limits' l='1551'>/// numeric_limits&lt;float&gt; specialization.</doc>
<doc f='include/c++/4.9/limits' l='1626'>/// numeric_limits&lt;double&gt; specialization.</doc>
<doc f='include/c++/4.9/limits' l='1701'>/// numeric_limits&lt;long double&gt; specialization.</doc>
<ovr f='TrinityCore6.x/dep/cppformat/format.h' l='274' c='std::numeric_limits'/>
<inh f='include/c++/4.9/limits' l='982' c='std::numeric_limits'/>
<def f='TrinityCore6.x/dep/cppformat/format.h' l='274'/>
<size>1</size>
<doc f='TrinityCore6.x/dep/cppformat/format.h' l='269'>// Standard permits specialization of std::numeric_limits. This specialization
// is used to resolve ambiguity between isinf and std::isinf in glibc:
// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=48891
// and the same for isnan and signbit.</doc>
<ovr f='include/boost/integer_traits.hpp' l='75' c='boost::integer_traits'/>
<ovr f='include/boost/integer_traits.hpp' l='81' c='boost::integer_traits'/>
<ovr f='include/boost/integer_traits.hpp' l='87' c='boost::integer_traits'/>
<ovr f='include/boost/integer_traits.hpp' l='93' c='boost::integer_traits'/>
<ovr f='include/boost/integer_traits.hpp' l='100' c='boost::integer_traits'/>
<ovr f='include/boost/integer_traits.hpp' l='134' c='boost::integer_traits'/>
<ovr f='include/boost/integer_traits.hpp' l='140' c='boost::integer_traits'/>
<ovr f='include/boost/integer_traits.hpp' l='146' c='boost::integer_traits'/>
<ovr f='include/boost/integer_traits.hpp' l='152' c='boost::integer_traits'/>
<ovr f='include/boost/integer_traits.hpp' l='158' c='boost::integer_traits'/>
<ovr f='include/boost/integer_traits.hpp' l='164' c='boost::integer_traits'/>
<ovr f='include/boost/integer_traits.hpp' l='173' c='boost::integer_traits'/>
<ovr f='include/boost/integer_traits.hpp' l='179' c='boost::integer_traits'/>
