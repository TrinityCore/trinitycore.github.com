<dec f='TrinityCore3.3.5/dep/g3dlite/include/G3D/CollisionDetection.h' l='732' type='static float G3D::CollisionDetection::collisionTimeForMovingPointFixedRectangle(const G3D::Vector3 &amp; point, const G3D::Vector3 &amp; velocity, const G3D::Vector3 &amp; v0, const G3D::Vector3 &amp; v1, const G3D::Vector3 &amp; v2, const G3D::Vector3 &amp; v3, G3D::Vector3 &amp; outLocation, G3D::Vector3 &amp; outNormal = ignore)'/>
<use f='TrinityCore3.3.5/dep/g3dlite/source/CollisionDetection.cpp' l='1191' u='c' c='_ZN3G3D18CollisionDetection35collisionTimeForMovingPointFixedBoxERKNS_7Vector3ES3_RKNS_3BoxERS1_S7_'/>
<use f='TrinityCore3.3.5/dep/g3dlite/source/CollisionDetection.cpp' l='1198' u='c' c='_ZN3G3D18CollisionDetection35collisionTimeForMovingPointFixedBoxERKNS_7Vector3ES3_RKNS_3BoxERS1_S7_'/>
<def f='TrinityCore3.3.5/dep/g3dlite/source/CollisionDetection.cpp' l='1308' type='static float G3D::CollisionDetection::collisionTimeForMovingPointFixedRectangle(const G3D::Vector3 &amp; point, const G3D::Vector3 &amp; velocity, const G3D::Vector3 &amp; v0, const G3D::Vector3 &amp; v1, const G3D::Vector3 &amp; v2, const G3D::Vector3 &amp; v3, G3D::Vector3 &amp; location, G3D::Vector3 &amp; outNormal = ignore)'/>
<doc f='TrinityCore3.3.5/dep/g3dlite/include/G3D/CollisionDetection.h' l='712'>/**
     Calculates time between the intersection of a moving point and a fixed
     rectangle defined by the points v0, v1, v2, &amp; v3.

     @note This is only a one sided collision test.   The side defined by
     the rectangle&apos;s surface normal is the only one tested.  For a two sided
     collision, call the function once for each side&apos;s surface normal.

     @param point        Moving point.
     @param velocity     Sphere&apos;s velocity.
     @param v0           Rectangle vertex 1.
     @param v1           Rectangle vertex 2.
     @param v2           Rectangle vertex 3
     @param v3           Rectangle vertex 4.
     @param outLocation  Location of collision [Post Condition]
     @param outNormal    Rectangle&apos;s surface normal. [Post Condition]

     @return Time til collision.  If there is no collision then the return
             value will be inf().
     */</doc>
<dec f='TrinityCore6.x/dep/g3dlite/include/G3D/CollisionDetection.h' l='732' type='static float G3D::CollisionDetection::collisionTimeForMovingPointFixedRectangle(const G3D::Vector3 &amp; point, const G3D::Vector3 &amp; velocity, const G3D::Vector3 &amp; v0, const G3D::Vector3 &amp; v1, const G3D::Vector3 &amp; v2, const G3D::Vector3 &amp; v3, G3D::Vector3 &amp; outLocation, G3D::Vector3 &amp; outNormal = ignore)'/>
<use f='TrinityCore6.x/dep/g3dlite/source/CollisionDetection.cpp' l='1191' u='c' c='_ZN3G3D18CollisionDetection35collisionTimeForMovingPointFixedBoxERKNS_7Vector3ES3_RKNS_3BoxERS1_S7_'/>
<use f='TrinityCore6.x/dep/g3dlite/source/CollisionDetection.cpp' l='1198' u='c' c='_ZN3G3D18CollisionDetection35collisionTimeForMovingPointFixedBoxERKNS_7Vector3ES3_RKNS_3BoxERS1_S7_'/>
<def f='TrinityCore6.x/dep/g3dlite/source/CollisionDetection.cpp' l='1308' type='static float G3D::CollisionDetection::collisionTimeForMovingPointFixedRectangle(const G3D::Vector3 &amp; point, const G3D::Vector3 &amp; velocity, const G3D::Vector3 &amp; v0, const G3D::Vector3 &amp; v1, const G3D::Vector3 &amp; v2, const G3D::Vector3 &amp; v3, G3D::Vector3 &amp; location, G3D::Vector3 &amp; outNormal = ignore)'/>
<doc f='TrinityCore6.x/dep/g3dlite/include/G3D/CollisionDetection.h' l='712'>/**
     Calculates time between the intersection of a moving point and a fixed
     rectangle defined by the points v0, v1, v2, &amp; v3.

     @note This is only a one sided collision test.   The side defined by
     the rectangle&apos;s surface normal is the only one tested.  For a two sided
     collision, call the function once for each side&apos;s surface normal.

     @param point        Moving point.
     @param velocity     Sphere&apos;s velocity.
     @param v0           Rectangle vertex 1.
     @param v1           Rectangle vertex 2.
     @param v2           Rectangle vertex 3
     @param v3           Rectangle vertex 4.
     @param outLocation  Location of collision [Post Condition]
     @param outNormal    Rectangle&apos;s surface normal. [Post Condition]

     @return Time til collision.  If there is no collision then the return
             value will be inf().
     */</doc>
