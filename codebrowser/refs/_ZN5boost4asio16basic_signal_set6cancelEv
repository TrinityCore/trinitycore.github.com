<def f='include/boost/asio/basic_signal_set.hpp' l='309' type='void boost::asio::basic_signal_set::cancel()'/>
<use f='TrinityCore3.3.5/src/server/authserver/Main.cpp' l='204' u='c' c='main'/>
<doc f='include/boost/asio/basic_signal_set.hpp' l='289'>/**
   * This function forces the completion of any pending asynchronous wait
   * operations against the signal set. The handler for each cancelled
   * operation will be invoked with the boost::asio::error::operation_aborted
   * error code.
   *
   * Cancellation does not alter the set of registered signals.
   *
   * @throws boost::system::system_error Thrown on failure.
   *
   * @note If a registered signal occurred before cancel() is called, then the
   * handlers for asynchronous wait operations will:
   *
   * @li have already been invoked; or
   *
   * @li have been queued for invocation in the near future.
   *
   * These handlers can no longer be cancelled, and therefore are passed an
   * error code that indicates the successful completion of the wait operation.
   */</doc>
<use f='TrinityCore6.x/src/server/bnetserver/Main.cpp' l='222' u='c' c='main'/>
