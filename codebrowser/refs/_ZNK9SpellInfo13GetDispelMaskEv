<dec f='TrinityCore3.3.5/src/server/game/Spells/SpellInfo.h' l='448' type='uint32 SpellInfo::GetDispelMask() const'/>
<use f='TrinityCore3.3.5/src/server/game/Entities/Unit/Unit.cpp' l='4428' u='c' c='_ZN4Unit22GetDispellableAuraListEPS_jRSt4listISt4pairIP4AurahESaIS5_EE'/>
<use f='TrinityCore3.3.5/src/server/game/Entities/Unit/Unit.cpp' l='11638' u='c' c='_ZN4Unit24ApplySpellDispelImmunityEPK9SpellInfo10DispelTypeb'/>
<use f='TrinityCore3.3.5/src/server/game/Spells/Spell.cpp' l='5657' u='c' c='_ZNK5Spell16CheckCasterAurasEv'/>
<use f='TrinityCore3.3.5/src/server/game/Spells/SpellEffects.cpp' l='828' u='c' c='_ZN5Spell18EffectTriggerSpellE13SpellEffIndex'/>
<use f='TrinityCore3.3.5/src/server/game/Spells/SpellEffects.cpp' l='5340' u='c' c='_ZN5Spell25EffectStealBeneficialBuffE13SpellEffIndex'/>
<def f='TrinityCore3.3.5/src/server/game/Spells/SpellInfo.cpp' l='1814' type='uint32 SpellInfo::GetDispelMask() const'/>
<dec f='TrinityCore6.x/src/server/game/Spells/SpellInfo.h' l='535' type='uint32 SpellInfo::GetDispelMask() const'/>
<doc f='TrinityCore6.x/src/server/game/Spells/SpellInfo.h' l='534'>//bool HasAnyEffectMechanic() const;</doc>
<use f='TrinityCore6.x/src/server/game/Entities/Unit/Unit.cpp' l='4185' u='c' c='_ZN4Unit22GetDispellableAuraListEPS_jRSt4listISt4pairIP4AurahESaIS5_EE'/>
<use f='TrinityCore6.x/src/server/game/Entities/Unit/Unit.cpp' l='9649' u='c' c='_ZN4Unit24ApplySpellDispelImmunityEPK9SpellInfo10DispelTypeb'/>
<use f='TrinityCore6.x/src/server/game/Spells/Spell.cpp' l='5694' u='c' c='_ZNK5Spell16CheckCasterAurasEv'/>
<use f='TrinityCore6.x/src/server/game/Spells/SpellEffects.cpp' l='731' u='c' c='_ZN5Spell18EffectTriggerSpellE13SpellEffIndex'/>
<use f='TrinityCore6.x/src/server/game/Spells/SpellEffects.cpp' l='5146' u='c' c='_ZN5Spell25EffectStealBeneficialBuffE13SpellEffIndex'/>
<def f='TrinityCore6.x/src/server/game/Spells/SpellInfo.cpp' l='2198' type='uint32 SpellInfo::GetDispelMask() const'/>
<doc f='TrinityCore6.x/src/server/game/Spells/SpellInfo.cpp' l='2190'>/*bool SpellInfo::HasAnyEffectMechanic() const
{
    for (uint8 i = 0; i &lt; MAX_SPELL_EFFECTS; ++i)
        if (Effects[i].Mechanic)
            return true;
    return false;
}*/</doc>
