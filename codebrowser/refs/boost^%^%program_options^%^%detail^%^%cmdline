<def f='include/boost/program_options/detail/cmdline.hpp' l='59'/>
<ovr f='include/boost/program_options/parsers.hpp' l='115' c='boost::program_options::basic_command_line_parser'/>
<size>112</size>
<doc f='include/boost/program_options/detail/cmdline.hpp' l='32'>/** Command line parser class. Main requirements were:
        - Powerful enough to support all common uses.
        - Simple and easy to learn/use.
        - Minimal code size and external dependencies.
        - Extensible for custom syntaxes.

        First all options are registered. After that, elements of command line
        are extracted using operator++. 

        For each element, user can find
        - if it&apos;s an option or an argument
        - name of the option
        - index of the option
        - option value(s), if any
        
        Sometimes the registered option name is not equal to the encountered
        one, for example, because name abbreviation is supported.  Therefore
        two option names can be obtained: 
        - the registered one 
        - the one found at the command line

        There are lot of style options, which can be used to tune the command
        line parsing. In addition, it&apos;s possible to install additional parser
        which will process custom option styles.

        @todo mininal match length for guessing?
    */</doc>
