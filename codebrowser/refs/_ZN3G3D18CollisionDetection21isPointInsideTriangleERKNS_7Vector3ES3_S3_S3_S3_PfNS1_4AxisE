<dec f='TrinityCore3.3.5/dep/g3dlite/include/G3D/CollisionDetection.h' l='1041' type='static bool G3D::CollisionDetection::isPointInsideTriangle(const G3D::Vector3 &amp; v0, const G3D::Vector3 &amp; v1, const G3D::Vector3 &amp; v2, const G3D::Vector3 &amp; normal, const G3D::Vector3 &amp; point, float * b, Vector3::Axis primaryAxis = Vector3::DETECT_AXIS)'/>
<use f='TrinityCore3.3.5/dep/g3dlite/include/G3D/CollisionDetection.h' l='1059' u='c' c='_ZN3G3D18CollisionDetection21isPointInsideTriangleERKNS_7Vector3ES3_S3_S3_S3_NS1_4AxisE'/>
<use f='TrinityCore3.3.5/dep/g3dlite/source/CollisionDetection.cpp' l='1658' u='c' c='_ZN3G3D18CollisionDetection41collisionTimeForMovingSphereFixedTriangleERKNS_6SphereERKNS_7Vector3ERKNS_8TriangleERS4_Pf'/>
<def f='TrinityCore3.3.5/dep/g3dlite/source/CollisionDetection.cpp' l='2009' type='static bool G3D::CollisionDetection::isPointInsideTriangle(const G3D::Vector3 &amp; v0, const G3D::Vector3 &amp; v1, const G3D::Vector3 &amp; v2, const G3D::Vector3 &amp; normal, const G3D::Vector3 &amp; point, float * b, Vector3::Axis primaryAxis = Vector3::DETECT_AXIS)'/>
<use f='TrinityCore3.3.5/dep/g3dlite/source/CollisionDetection.cpp' l='2259' u='c' c='_ZN3G3D18CollisionDetection39fixedSolidSphereIntersectsFixedTriangleERKNS_6SphereERKNS_8TriangleE'/>
<doc f='TrinityCore3.3.5/dep/g3dlite/include/G3D/CollisionDetection.h' l='1025'>/**
     Tests whether a point is contained within the triangle defined by
     v0, v1, and v2 and its plane&apos;s normal.

     @param v0 Triangle vertex 0.
     @param v1 Triangle vertex 1.
     @param v2 Triangle vertex 2.
     @param normal Normal to triangle&apos;s plane.
     @param point The point in question.
     @param primaryAxis Primary axis of triangle.  This will be detected
            if not given. This parameter is provided as an optimization.
     @param b Barycentric coordinates; b[i] is the weight on v[i]

     @return true  - if point is inside the triangle.
     @return false - otherwise
     */</doc>
<dec f='TrinityCore6.x/dep/g3dlite/include/G3D/CollisionDetection.h' l='1041' type='static bool G3D::CollisionDetection::isPointInsideTriangle(const G3D::Vector3 &amp; v0, const G3D::Vector3 &amp; v1, const G3D::Vector3 &amp; v2, const G3D::Vector3 &amp; normal, const G3D::Vector3 &amp; point, float * b, Vector3::Axis primaryAxis = Vector3::DETECT_AXIS)'/>
<use f='TrinityCore6.x/dep/g3dlite/include/G3D/CollisionDetection.h' l='1059' u='c' c='_ZN3G3D18CollisionDetection21isPointInsideTriangleERKNS_7Vector3ES3_S3_S3_S3_NS1_4AxisE'/>
<use f='TrinityCore6.x/dep/g3dlite/source/CollisionDetection.cpp' l='1658' u='c' c='_ZN3G3D18CollisionDetection41collisionTimeForMovingSphereFixedTriangleERKNS_6SphereERKNS_7Vector3ERKNS_8TriangleERS4_Pf'/>
<def f='TrinityCore6.x/dep/g3dlite/source/CollisionDetection.cpp' l='2009' type='static bool G3D::CollisionDetection::isPointInsideTriangle(const G3D::Vector3 &amp; v0, const G3D::Vector3 &amp; v1, const G3D::Vector3 &amp; v2, const G3D::Vector3 &amp; normal, const G3D::Vector3 &amp; point, float * b, Vector3::Axis primaryAxis = Vector3::DETECT_AXIS)'/>
<use f='TrinityCore6.x/dep/g3dlite/source/CollisionDetection.cpp' l='2259' u='c' c='_ZN3G3D18CollisionDetection39fixedSolidSphereIntersectsFixedTriangleERKNS_6SphereERKNS_8TriangleE'/>
<doc f='TrinityCore6.x/dep/g3dlite/include/G3D/CollisionDetection.h' l='1025'>/**
     Tests whether a point is contained within the triangle defined by
     v0, v1, and v2 and its plane&apos;s normal.

     @param v0 Triangle vertex 0.
     @param v1 Triangle vertex 1.
     @param v2 Triangle vertex 2.
     @param normal Normal to triangle&apos;s plane.
     @param point The point in question.
     @param primaryAxis Primary axis of triangle.  This will be detected
            if not given. This parameter is provided as an optimization.
     @param b Barycentric coordinates; b[i] is the weight on v[i]

     @return true  - if point is inside the triangle.
     @return false - otherwise
     */</doc>
